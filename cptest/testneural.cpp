#include <cp-neural.h>

// Manual build:
// g++ -g -ggdb -I ../cpneural -I /usr/local/include/eigen3 testneural.cpp -L ../Build/cpneural/ -lcpneural -lpthread -o test

using std::cout; using std::endl;

bool matComp(MatrixN& m0, MatrixN& m1, string msg="", floatN eps=1.e-6) {
    if (m0.cols() != m1.cols() || m0.rows() != m1.rows()) {
        cout << msg << ": Incompatible shapes " << shape(m0) << "!=" << shape(m1) << endl;
        return false;
    }
    MatrixN d = m0 - m1;
    floatN dif = d.cwiseProduct(d).sum();
    if (dif < eps) {
        cout << msg << " err=" << dif << endl;
        return true;
    } else {
        IOFormat CleanFmt(4, 0, ", ", "\n", "[", "]");
        cout << msg << " m0:" << endl << m0.format(CleanFmt) << endl;
        cout << msg << " m1:" << endl << m1.format(CleanFmt) << endl;
        cout << msg << "  âˆ‚:" << endl << (m0-m1).format(CleanFmt) << endl;
        cout << "err=" << dif << endl;
        return false;
    }
}

/*MatrixN linspace(MatrixN m0, floatN a, floatN b) {
    int n=m0.size();
    MatrixN y(m0);
    for (auto i=0; i<=y.size(); i++) { // Strang, but numpy compatible
        y(i)=(floatN)(i)/(floatN)(n) * (b-a)+a;
    }
    return y;
}
*/
bool checkAffineForward(floatN eps=CP_DEFAULT_NUM_EPS) {
    MatrixN x(2,4);
    x << -0.1       , -0.01428571,  0.07142857,  0.15714286,
          0.24285714,  0.32857143,  0.41428571,  0.5;
    MatrixN W(4,3);
    W << -0.2       , -0.15454545, -0.10909091,
         -0.06363636, -0.01818182,  0.02727273,
          0.07272727,  0.11818182,  0.16363636,
          0.20909091,  0.25454545,  0.3;
    MatrixN b(1,3);
    b << -0.3, -0.1,  0.1;
    MatrixN y(2,3);
    y << -0.24103896, -0.03584416,  0.16935065,
         -0.23480519,  0.03272727,  0.30025974;

     //Affine pe(CpParams("{inputShape=[4,3]}"));
     Affine pe("{inputShape=[4];hidden=3}");
    *(pe.params["W"])= W;
    *(pe.params["b"])=b;
    MatrixN y0=pe.forward(x, nullptr);
    return matComp(y,y0,"AffineForward",eps);
}

bool checkAffineBackward(float eps=CP_DEFAULT_NUM_EPS) {
    MatrixN x(2,4);
    x << 1.31745392, -0.61371249,  0.45447287, -0.27054087,
         0.10106874,  1.00650622,  0.47243961, -0.42940807;
    MatrixN W(4,5);
    W << -0.33297518, -0.34410449, -0.84123035, -0.04845468, -2.35649863,
          0.50012296,  0.11834242, -0.95766758,  1.03839053,  0.88182165,
         -0.08384473,  0.74101315, -0.6128059 , -0.10586676, -0.70638727,
         -0.69378517,  0.23008973, -0.16988779, -1.66077535,  0.10843451;
    MatrixN b(1,5);
    b <<  1.42152833, -0.50754731,  0.09331398,  0.83707801,  1.39097462;
    MatrixN dx(2,4);
    dx << -2.59324406, -2.10880392, -3.29279846, -2.19694245,
          -3.81171235,  4.25370933, -1.5117824 , -3.21306015;
    MatrixN dW(4,5);
    dW << 1.1393111 , -2.22498409,  3.93887327,  0.77438161,  0.35517399,
         -0.14120118,  0.51706313, -2.45941632,  1.63133349,  1.74156205,
          0.55479794, -0.98325637,  1.09937315,  1.09447527,  0.91454051,
         -0.38504418,  0.65836473, -0.56660463, -0.93167997, -0.8126062;
    MatrixN db(1,5);
    db << 1.20613441, -2.1440201 ,  2.44244227,  2.33348303,  1.9407547;
    MatrixN dchain(2,5);
    dchain << 0.83641977, -1.65103186,  3.03523817,  0.44273757,  0.13073521,
              0.36971463, -0.49298824, -0.5927959 ,  1.89074546,  1.81001949;
    Affine pe("{inputShape=[4];hidden=5}");
    *(pe.params["W"])=W;
    *(pe.params["b"])=b;
    t_cppl cache;
    t_cppl grads;
    MatrixN y=pe.forward(x, &cache);
    MatrixN dx0=pe.backward(dchain, &cache, &grads);
    bool allOk=true;
    bool ret=matComp(dx,dx0,"AffineBackward dx",eps);
    if (!ret) allOk=false;
    ret=matComp(dW,*(grads["W"]),"AffineBackward dW",eps);
    if (!ret) allOk=false;
    ret=matComp(db,*(grads["b"]),"AffineBackward bx",eps);
    if (!ret) allOk=false;
    cppl_delete(&cache);
    cppl_delete(&grads);
    return allOk;
}

bool checkReluForward(floatN eps=CP_DEFAULT_NUM_EPS) {
    MatrixN x(3,4);
    x << -0.5       , -0.40909091, -0.31818182, -0.22727273,
         -0.13636364, -0.04545455,  0.04545455,  0.13636364,
          0.22727273,  0.31818182,  0.40909091,  0.5;

    MatrixN y(3,4);
    y << 0.        ,  0.        ,  0.        ,  0.        ,
         0.        ,  0.        ,  0.04545455,  0.13636364,
         0.22727273,  0.31818182,  0.40909091,  0.5;

    Relu rl(CpParams("{inputShape=[4]}"));
    MatrixN y0=rl.forward(x, nullptr);
    return matComp(y,y0,"ReluForward",eps);
}

bool checkReluBackward(float eps=CP_DEFAULT_NUM_EPS) {
    MatrixN x(4,4);
    x << -0.56204781, -0.30204112,  0.7685022 , -0.74405281,
         -1.46482614, -0.3824993 ,  0.23478267,  0.81716411,
         -0.7702258 ,  0.25433918,  0.33381382,  0.22000994,
          0.43154112, -0.2128072 ,  0.90312084,  1.32935976;
    MatrixN dx(4,4);
    dx << -0.        , -0.        ,  1.23506749,  0.,
          -0.        ,  0.        , -0.68054398,  2.23784401,
          -0.        ,  0.36303492, -0.08854093,  0.63582723,
          -0.07389104, -0.        , -1.18782779, -0.8492151;
    MatrixN dchain(4,4);
    dchain << -0.53996216, -1.18478937,  1.23506749,  0.0695497,
              -1.10965119,  0.24569561, -0.68054398,  2.23784401,
              -0.39696365,  0.36303492, -0.08854093,  0.63582723,
              -0.07389104, -0.38178744, -1.18782779, -0.8492151;
    Relu rl("{inputShape=[4]}");
    t_cppl cache;
    t_cppl grads;
    MatrixN y=rl.forward(x, &cache);
    MatrixN dx0=rl.backward(dchain, &cache, &grads);
    bool allOk=true;
    bool ret=matComp(dx,dx0,"ReluBackward dx",eps);
    if (!ret) allOk=false;
    cppl_delete(&cache);
    cppl_delete(&grads);
    return allOk;
}

bool checkBatchNormForward(floatN eps=CP_DEFAULT_NUM_EPS) {
    t_cppl cache;
    bool allOk=true;
    MatrixN x(10,3);
    x << -1.76682167,  0.76232051, -1.31336665,
         -1.5949946 ,  0.96014   ,  0.71301837,
          1.64497495,  2.10628039, -0.79136981,
         -0.06795316, -0.47106827,  1.18868314,
          0.92155587, -0.08303236,  0.52682692,
         -3.12821021,  2.16827829, -0.93670303,
         -0.6552201 ,  0.35542666,  0.52397302,
         -3.60689284,  2.35628056,  1.01625476,
          0.38807454, -0.35816073,  0.69088183,
          1.06266819,  1.04606173, -0.53434315;

    MatrixN xn(10,3);
    xn << -0.6369156 , -0.12222813, -1.65495685,
         -0.53619278,  0.07607152,  0.70380848,
          1.36303558,  1.22499387, -1.04733883,
          0.35893921, -1.35861064,  1.25749474,
          0.93897664, -0.96963287,  0.48707675,
         -1.434944  ,  1.28714225, -1.21651051,
          0.01469091, -0.53010961,  0.48375473,
         -1.71554159,  1.47560085,  1.05678359,
          0.62625677, -1.24542905,  0.67804096,
          1.02169486,  0.1622018 , -0.74815305;

    BatchNorm bn("{inputShape=[3];train=true}");
    //bn.setPar("trainMode", true);
    MatrixN xn0=bn.forward(x, &cache);
    MatrixN mean=xn0.colwise().mean();
    cout << "Mean:" << mean << endl;
    MatrixN xme = xn0.rowwise() - RowVectorN(mean.row(0));
    MatrixN xmsq = ((xme.array() * xme.array()).colwise().sum()/xn0.rows()).array().sqrt();
    cout << "StdDev:" << xmsq << endl;

    if (!matComp(xn,xn0,"BatchNormForward",eps)) {
        cout << "BatchNorm forward failed" << endl;
        allOk=false;
    }  else {
        cout << "  BatchNorm forward ok." << endl;
    }

    MatrixN runmean(1,3);
    runmean << -0.06802819,  0.08842527,  0.01083855;
    MatrixN runvar(1,3);
    runvar << 0.170594  ,  0.09975786,  0.08590872;
    if (!matComp(*(cache["running_mean"]),runmean)) {
        cout << "BatchNorm running-mean failed" << endl;
        allOk=false;
    } else {
        cout << "  BatchNorm running mean ok." << endl;
    }
    if (!matComp(*(cache["running_var"]),runvar)) {
        cout << "BatchNorm running-var failed" << endl;
        allOk=false;
    } else {
        cout << "  BatchNorm running var ok." << endl;
    }
    cppl_delete(&cache);

    t_cppl cache2;
    MatrixN xn2(10,3);
    xn2 << 10.3630844 ,  11.75554375,   8.03512946,
           10.46380722,  12.15214304,  15.11142543,
           12.36303558,  14.44998773,   9.8579835 ,
           11.35893921,   9.28277872,  16.77248423,
           11.93897664,  10.06073426,  14.46123025,
            9.565056  ,  14.5742845 ,   9.35046847,
           11.01469091,  10.93978079,  14.45126418,
            9.28445841,  14.95120171,  16.17035077,
           11.62625677,   9.5091419 ,  15.03412288,
           12.02169486,  12.3244036 ,  10.75554084;


    BatchNorm bn2("{inputShape=[3];train=true}");
    *(bn2.params["gamma"]) << 1.0, 2.0, 3.0;
    *(bn2.params["beta"]) << 11.0, 12.0, 13.0;
    //bn.setPar("trainMode", true);
    MatrixN xn20=bn2.forward(x, &cache2);
    MatrixN mean2=xn20.colwise().mean();
    cout << "Mean:" << mean2 << endl;
    MatrixN xme2 = xn20.rowwise() - RowVectorN(mean2.row(0));
    MatrixN xmsq2 = ((xme2.array() * xme2.array()).colwise().sum()/xn20.rows()).array().sqrt();
    cout << "StdDev:" << xmsq2 << endl;

    if (!matComp(xn2,xn20,"BatchNormForward",eps)) {
        cout << "BatchNorm with beta/gamma forward failed" << endl;
        allOk=false;
    }  else {
        cout << "  BatchNorm beta/gamma forward ok." << endl;
    }

    MatrixN runmean2(1,3);
    runmean2 << -0.06802819,  0.08842527,  0.01083855;
    MatrixN runvar2(1,3);
    runvar2 << 0.170594  ,  0.09975786,  0.08590872;
    if (!matComp(*(cache2["running_mean"]),runmean2)) {
        cout << "BatchNorm running-mean2 failed" << endl;
        allOk=false;
    } else {
        cout << "  BatchNorm running mean2 ok." << endl;
    }
    if (!matComp(*(cache2["running_var"]),runvar2)) {
        cout << "BatchNorm running-var2 failed" << endl;
        allOk=false;
    } else {
        cout << "  BatchNorm running var2 ok." << endl;
    }
    cppl_delete(&cache2);

    t_cppl cache3;
    int nnr=200;
    MatrixN xt(nnr,3);
    BatchNorm bn3("{inputShape=[3];train=true}");
    *(bn3.params["gamma"]) << 1.0, 2.0, 3.0;
    *(bn3.params["beta"]) << 0.0, -1.0, 4.0;
    for (int i=0; i<nnr; i++) {
        xt.setRandom();
        bn3.forward(xt,&cache3);
    }
    cout << "  Running mean after " << nnr << " cycl: " << *(cache3["running_mean"]) << endl;
    cout << "  Running stdvar after " << nnr << " cycl: " << *(cache3["running_var"]) << endl;
    cout << "switching test" << endl;
    bn3.cp.setPar("train", false);
    if (bn3.cp.getPar("train", true)) cout << "INTERNAL ERROR: parSet boolean failed!" << endl;
    xt.setRandom();
    MatrixN xn30=bn3.forward(xt, &cache3);
    MatrixN mean3=xn30.colwise().mean();
    cout << "  Mean:" << mean3 << endl;
    if (!matComp(*(bn3.params["beta"]), mean3, "Batchnorm train/test sequence: mean", 0.1)) {
        allOk=0;
    }
    MatrixN xme3 = xn30.rowwise() - RowVectorN(mean3.row(0));
    MatrixN xmsq3 = ((xme3.array() * xme3.array()).colwise().sum()/xn30.rows()).array().sqrt();
    cout << "  StdDev:" << xmsq3 << endl;
    if (!matComp(*(bn3.params["gamma"]), xmsq3, "Batchnorm train/test sequence: stdderi", 0.1)) {
        allOk=0;
    }
    cppl_delete(&cache3);

    return allOk;
}

bool checkBatchNormBackward(float eps=CP_DEFAULT_NUM_EPS) {
    bool allOk=true;
    MatrixN x(4,5);
    x << 15.70035538,  10.9836183 ,  12.60007796,   8.40461897, 6.73940903,
         18.85269464,  17.58441018,  14.44920968,   7.33474882, 11.35816205,
         17.20864889,   5.43166315,  14.90657023,  13.22667748, 15.03122597,
          4.33556564,   2.44751717,  12.06870335,   5.74243521, 12.16941296;
    MatrixN gamma(1,5);
    gamma << 0.31896744,  1.67004399,  1.57384876, -0.79775794,  0.15197293;
    MatrixN beta(1,5);
    beta << 1.6099422 ,  1.55804396,  0.88364562,  1.21053159,  0.50543461;

    MatrixN dx(4,5);
    dx << -0.04546749,  0.126882  ,  0.4864624 ,  0.18757926,  0.02899233,
          -0.01486729, -0.09133611, -0.26401447, -0.24233534, -0.0726569 ,
           0.05690624,  0.10035256,  0.13037742, -0.01516446,  0.03441372,
           0.00342854, -0.13589844, -0.35282534,  0.06992054,  0.00925085;
    MatrixN dgamma(1,5);
    dgamma << -1.20718803, -1.45268518, -0.05539113, -2.07077292,  0.89780683;
    MatrixN dbeta(1,5);
    dbeta << -4.45908107, -1.23582122,  0.04775023,  3.14325285,  1.0989124;

    MatrixN dchain(4,5);
    dchain << -2.01650781,  0.01176043,  0.39260716,  0.17978038,  0.49731936,
              -1.63610541, -1.15773852, -0.19987901,  1.88290138, -1.14657413,
              -0.26565248,  0.26942709,  0.09496168, -0.00460701,  1.22847938,
              -0.54081537, -0.35927023, -0.23993959,  1.0851781 ,  0.51968779;

    BatchNorm bn("{inputShape=[5];train=true}");
    *(bn.params["gamma"])=gamma;
    *(bn.params["beta"])=beta;

    t_cppl cache;
    t_cppl grads;
    MatrixN y=bn.forward(x, &cache);
    MatrixN dx0=bn.backward(dchain, &cache, &grads);

    bool ret=matComp(dx,dx0,"BatchNormBackward dx",eps);
    if (!ret) allOk=false;
    ret=matComp(dgamma,*grads["gamma"],"BatchNormBackward dgamma",eps);
    if (!ret) allOk=false;
    ret=matComp(dbeta,*grads["beta"],"BatchNormBackward dbeta",eps);
    if (!ret) allOk=false;

    cppl_delete(&cache);
    cppl_delete(&grads);
    return allOk;
}

bool checkDropout(float eps=3.0e-2) {
    bool allOk=true;
    MatrixN x(500,500);
    x.setRandom();
    floatN dl=10.0;
    floatN dop=0.8;
    x.array() += dl;

    Dropout dp("{inputShape=[500];train=true}");
    dp.cp.setPar("drop",dop);
    MatrixN y=dp.forward(x, nullptr);
    dp.cp.setPar("train",false);
    MatrixN yt=dp.forward(x, nullptr);

    floatN xm=x.mean();
    floatN ym=y.mean();
    floatN ytm=yt.mean();

    cout << "Dropout: x-mean:" << xm << endl;
    cout << "  y-mean:" << ym << endl;
    cout << "  yt-mean:" << ytm << endl;
    cout << "  drop:" << dop << endl;
    cout << "  offs:" << dl << endl;

    floatN err1=std::abs(ytm-ym);
    if (err1 > eps) {
        allOk=false;
        cout << "Dropout: difference between test-mean:" << ytm << " and train-mean:" << ym << " too high:" << err1 << endl;
    }
    floatN err2=std::abs(xm-dl);
    if (err2 > eps) {
        allOk=false;
        cout << "Dropout: difference between x-mean and random-offset too high:"  << err2 << endl;
    }
    floatN err3=std::abs(dl*dop-ym);
    if (err3 > eps) {
        allOk=false;
        cout << "Dropout: difference between y-mean*offset and droprate too high"  << err3 << endl;
    }
    if (allOk) cout << "Dropout: statistics tests ok, err1:" << err1 << " err2:" << err2 << " err3:" << err3 << endl;
    return allOk;
}

bool checkConvolutionForwardMin(floatN eps=CP_DEFAULT_NUM_EPS) {
    MatrixN x(2,48); // 2x3x4x4 NxCxHxW
    x << -0.1       , -0.09368421, -0.08736842, -0.08105263,
          -0.07473684, -0.06842105, -0.06210526, -0.05578947,
          -0.04947368, -0.04315789, -0.03684211, -0.03052632,
          -0.02421053, -0.01789474, -0.01157895, -0.00526316,

           0.00105263,  0.00736842,  0.01368421,  0.02      ,
           0.02631579,  0.03263158,  0.03894737,  0.04526316,
           0.05157895,  0.05789474,  0.06421053,  0.07052632,
           0.07684211,  0.08315789,  0.08947368,  0.09578947,

           0.10210526,  0.10842105,  0.11473684,  0.12105263,
           0.12736842,  0.13368421,  0.14      ,  0.14631579,
           0.15263158,  0.15894737,  0.16526316,  0.17157895,
           0.17789474,  0.18421053,  0.19052632,  0.19684211,


           0.20315789,  0.20947368,  0.21578947,  0.22210526,
           0.22842105,  0.23473684,  0.24105263,  0.24736842,
           0.25368421,  0.26      ,  0.26631579,  0.27263158,
           0.27894737,  0.28526316,  0.29157895,  0.29789474,

           0.30421053,  0.31052632,  0.31684211,  0.32315789,
           0.32947368,  0.33578947,  0.34210526,  0.34842105,
           0.35473684,  0.36105263,  0.36736842,  0.37368421,
           0.38      ,  0.38631579,  0.39263158,  0.39894737,

           0.40526316,  0.41157895,  0.41789474,  0.42421053,
           0.43052632,  0.43684211,  0.44315789,  0.44947368,
           0.45578947,  0.46210526,  0.46842105,  0.47473684,
           0.48105263,  0.48736842,  0.49368421,  0.5;

    MatrixN W(3,48); // 3x3x4x4 FxCxHHxWW
    W << -0.2       , -0.1965035 , -0.19300699, -0.18951049,
          -0.18601399, -0.18251748, -0.17902098, -0.17552448,
          -0.17202797, -0.16853147, -0.16503497, -0.16153846,
          -0.15804196, -0.15454545, -0.15104895, -0.14755245,

          -0.14405594, -0.14055944, -0.13706294, -0.13356643,
          -0.13006993, -0.12657343, -0.12307692, -0.11958042,
          -0.11608392, -0.11258741, -0.10909091, -0.10559441,
          -0.1020979 , -0.0986014 , -0.0951049 , -0.09160839,

          -0.08811189, -0.08461538, -0.08111888, -0.07762238,
          -0.07412587, -0.07062937, -0.06713287, -0.06363636,
          -0.06013986, -0.05664336, -0.05314685, -0.04965035,
          -0.04615385, -0.04265734, -0.03916084, -0.03566434,


          -0.03216783, -0.02867133, -0.02517483, -0.02167832,
          -0.01818182, -0.01468531, -0.01118881, -0.00769231,
          -0.0041958 , -0.0006993 ,  0.0027972 ,  0.00629371,
           0.00979021,  0.01328671,  0.01678322,  0.02027972,

           0.02377622,  0.02727273,  0.03076923,  0.03426573,
           0.03776224,  0.04125874,  0.04475524,  0.04825175,
           0.05174825,  0.05524476,  0.05874126,  0.06223776,
           0.06573427,  0.06923077,  0.07272727,  0.07622378,

           0.07972028,  0.08321678,  0.08671329,  0.09020979,
           0.09370629,  0.0972028 ,  0.1006993 ,  0.1041958 ,
           0.10769231,  0.11118881,  0.11468531,  0.11818182,
           0.12167832,  0.12517483,  0.12867133,  0.13216783,


           0.13566434,  0.13916084,  0.14265734,  0.14615385,
           0.14965035,  0.15314685,  0.15664336,  0.16013986,
           0.16363636,  0.16713287,  0.17062937,  0.17412587,
           0.17762238,  0.18111888,  0.18461538,  0.18811189,

           0.19160839,  0.1951049 ,  0.1986014 ,  0.2020979 ,
           0.20559441,  0.20909091,  0.21258741,  0.21608392,
           0.21958042,  0.22307692,  0.22657343,  0.23006993,
           0.23356643,  0.23706294,  0.24055944,  0.24405594,

           0.24755245,  0.25104895,  0.25454545,  0.25804196,
           0.26153846,  0.26503497,  0.26853147,  0.27202797,
           0.27552448,  0.27902098,  0.28251748,  0.28601399,
           0.28951049,  0.29300699,  0.2965035 ,  0.3;

    MatrixN b(3,1);
    b << -0.1 ,  0.05,  0.2;

    MatrixN y(2,12);
    y << -0.08759809, -0.10987781,
        -0.18387192, -0.2109216 ,
         0.21027089,  0.21661097,
         0.22847626,  0.23004637,
         0.50813986,  0.54309974,
         0.64082444,  0.67101435,
        -0.98053589, -1.03143541,
        -1.19128892, -1.24695841,
         0.69108355,  0.66880383,
         0.59480972,  0.56776003,
         2.36270298,  2.36904306,
         2.38090835,  2.38247847;

         // inputShape: C, H, W; kernel: F, HH, WW
    Convolution cv("{inputShape=[3,4,4];kernel=[3,4,4];stride=2;pad=1}");
    *(cv.params["W"])= W;
    *(cv.params["b"])=b;
    MatrixN y0=cv.forward(x, nullptr);

    return matComp(y,y0,"ConvolutionForward",eps);



}

bool checkConvolutionForward(floatN eps=CP_DEFAULT_NUM_EPS) {
    MatrixN x(7,108); // 2x3x4x4 NxCxHxW
    x << -1.00000000e-01,  -9.92052980e-02,  -9.84105960e-02,
           -9.76158940e-02,  -9.68211921e-02,  -9.60264901e-02,
           -9.52317881e-02,  -9.44370861e-02,  -9.36423841e-02,
           -9.28476821e-02,  -9.20529801e-02,  -9.12582781e-02,
           -9.04635762e-02,  -8.96688742e-02,  -8.88741722e-02,
           -8.80794702e-02,  -8.72847682e-02,  -8.64900662e-02,
           -8.56953642e-02,  -8.49006623e-02,  -8.41059603e-02,
           -8.33112583e-02,  -8.25165563e-02,  -8.17218543e-02,
           -8.09271523e-02,  -8.01324503e-02,  -7.93377483e-02,
           -7.85430464e-02,  -7.77483444e-02,  -7.69536424e-02,
           -7.61589404e-02,  -7.53642384e-02,  -7.45695364e-02,
           -7.37748344e-02,  -7.29801325e-02,  -7.21854305e-02,

           -7.13907285e-02,  -7.05960265e-02,  -6.98013245e-02,
           -6.90066225e-02,  -6.82119205e-02,  -6.74172185e-02,
           -6.66225166e-02,  -6.58278146e-02,  -6.50331126e-02,
           -6.42384106e-02,  -6.34437086e-02,  -6.26490066e-02,
           -6.18543046e-02,  -6.10596026e-02,  -6.02649007e-02,
           -5.94701987e-02,  -5.86754967e-02,  -5.78807947e-02,
           -5.70860927e-02,  -5.62913907e-02,  -5.54966887e-02,
           -5.47019868e-02,  -5.39072848e-02,  -5.31125828e-02,
           -5.23178808e-02,  -5.15231788e-02,  -5.07284768e-02,
           -4.99337748e-02,  -4.91390728e-02,  -4.83443709e-02,
           -4.75496689e-02,  -4.67549669e-02,  -4.59602649e-02,
           -4.51655629e-02,  -4.43708609e-02,  -4.35761589e-02,

           -4.27814570e-02,  -4.19867550e-02,  -4.11920530e-02,
           -4.03973510e-02,  -3.96026490e-02,  -3.88079470e-02,
           -3.80132450e-02,  -3.72185430e-02,  -3.64238411e-02,
           -3.56291391e-02,  -3.48344371e-02,  -3.40397351e-02,
           -3.32450331e-02,  -3.24503311e-02,  -3.16556291e-02,
           -3.08609272e-02,  -3.00662252e-02,  -2.92715232e-02,
           -2.84768212e-02,  -2.76821192e-02,  -2.68874172e-02,
           -2.60927152e-02,  -2.52980132e-02,  -2.45033113e-02,
           -2.37086093e-02,  -2.29139073e-02,  -2.21192053e-02,
           -2.13245033e-02,  -2.05298013e-02,  -1.97350993e-02,
           -1.89403974e-02,  -1.81456954e-02,  -1.73509934e-02,
           -1.65562914e-02,  -1.57615894e-02,  -1.49668874e-02,


           -1.41721854e-02,  -1.33774834e-02,  -1.25827815e-02,
           -1.17880795e-02,  -1.09933775e-02,  -1.01986755e-02,
           -9.40397351e-03,  -8.60927152e-03,  -7.81456954e-03,
           -7.01986755e-03,  -6.22516556e-03,  -5.43046358e-03,
           -4.63576159e-03,  -3.84105960e-03,  -3.04635762e-03,
           -2.25165563e-03,  -1.45695364e-03,  -6.62251656e-04,
            1.32450331e-04,   9.27152318e-04,   1.72185430e-03,
            2.51655629e-03,   3.31125828e-03,   4.10596026e-03,
            4.90066225e-03,   5.69536424e-03,   6.49006623e-03,
            7.28476821e-03,   8.07947020e-03,   8.87417219e-03,
            9.66887417e-03,   1.04635762e-02,   1.12582781e-02,
            1.20529801e-02,   1.28476821e-02,   1.36423841e-02,

            1.44370861e-02,   1.52317881e-02,   1.60264901e-02,
            1.68211921e-02,   1.76158940e-02,   1.84105960e-02,
            1.92052980e-02,   2.00000000e-02,   2.07947020e-02,
            2.15894040e-02,   2.23841060e-02,   2.31788079e-02,
            2.39735099e-02,   2.47682119e-02,   2.55629139e-02,
            2.63576159e-02,   2.71523179e-02,   2.79470199e-02,
            2.87417219e-02,   2.95364238e-02,   3.03311258e-02,
            3.11258278e-02,   3.19205298e-02,   3.27152318e-02,
            3.35099338e-02,   3.43046358e-02,   3.50993377e-02,
            3.58940397e-02,   3.66887417e-02,   3.74834437e-02,
            3.82781457e-02,   3.90728477e-02,   3.98675497e-02,
            4.06622517e-02,   4.14569536e-02,   4.22516556e-02,

            4.30463576e-02,   4.38410596e-02,   4.46357616e-02,
            4.54304636e-02,   4.62251656e-02,   4.70198675e-02,
            4.78145695e-02,   4.86092715e-02,   4.94039735e-02,
            5.01986755e-02,   5.09933775e-02,   5.17880795e-02,
            5.25827815e-02,   5.33774834e-02,   5.41721854e-02,
            5.49668874e-02,   5.57615894e-02,   5.65562914e-02,
            5.73509934e-02,   5.81456954e-02,   5.89403974e-02,
            5.97350993e-02,   6.05298013e-02,   6.13245033e-02,
            6.21192053e-02,   6.29139073e-02,   6.37086093e-02,
            6.45033113e-02,   6.52980132e-02,   6.60927152e-02,
            6.68874172e-02,   6.76821192e-02,   6.84768212e-02,
            6.92715232e-02,   7.00662252e-02,   7.08609272e-02,


            7.16556291e-02,   7.24503311e-02,   7.32450331e-02,
            7.40397351e-02,   7.48344371e-02,   7.56291391e-02,
            7.64238411e-02,   7.72185430e-02,   7.80132450e-02,
            7.88079470e-02,   7.96026490e-02,   8.03973510e-02,
            8.11920530e-02,   8.19867550e-02,   8.27814570e-02,
            8.35761589e-02,   8.43708609e-02,   8.51655629e-02,
            8.59602649e-02,   8.67549669e-02,   8.75496689e-02,
            8.83443709e-02,   8.91390728e-02,   8.99337748e-02,
            9.07284768e-02,   9.15231788e-02,   9.23178808e-02,
            9.31125828e-02,   9.39072848e-02,   9.47019868e-02,
            9.54966887e-02,   9.62913907e-02,   9.70860927e-02,
            9.78807947e-02,   9.86754967e-02,   9.94701987e-02,

            1.00264901e-01,   1.01059603e-01,   1.01854305e-01,
            1.02649007e-01,   1.03443709e-01,   1.04238411e-01,
            1.05033113e-01,   1.05827815e-01,   1.06622517e-01,
            1.07417219e-01,   1.08211921e-01,   1.09006623e-01,
            1.09801325e-01,   1.10596026e-01,   1.11390728e-01,
            1.12185430e-01,   1.12980132e-01,   1.13774834e-01,
            1.14569536e-01,   1.15364238e-01,   1.16158940e-01,
            1.16953642e-01,   1.17748344e-01,   1.18543046e-01,
            1.19337748e-01,   1.20132450e-01,   1.20927152e-01,
            1.21721854e-01,   1.22516556e-01,   1.23311258e-01,
            1.24105960e-01,   1.24900662e-01,   1.25695364e-01,
            1.26490066e-01,   1.27284768e-01,   1.28079470e-01,

            1.28874172e-01,   1.29668874e-01,   1.30463576e-01,
            1.31258278e-01,   1.32052980e-01,   1.32847682e-01,
            1.33642384e-01,   1.34437086e-01,   1.35231788e-01,
            1.36026490e-01,   1.36821192e-01,   1.37615894e-01,
            1.38410596e-01,   1.39205298e-01,   1.40000000e-01,
            1.40794702e-01,   1.41589404e-01,   1.42384106e-01,
            1.43178808e-01,   1.43973510e-01,   1.44768212e-01,
            1.45562914e-01,   1.46357616e-01,   1.47152318e-01,
            1.47947020e-01,   1.48741722e-01,   1.49536424e-01,
            1.50331126e-01,   1.51125828e-01,   1.51920530e-01,
            1.52715232e-01,   1.53509934e-01,   1.54304636e-01,
            1.55099338e-01,   1.55894040e-01,   1.56688742e-01,


            1.57483444e-01,   1.58278146e-01,   1.59072848e-01,
            1.59867550e-01,   1.60662252e-01,   1.61456954e-01,
            1.62251656e-01,   1.63046358e-01,   1.63841060e-01,
            1.64635762e-01,   1.65430464e-01,   1.66225166e-01,
            1.67019868e-01,   1.67814570e-01,   1.68609272e-01,
            1.69403974e-01,   1.70198675e-01,   1.70993377e-01,
            1.71788079e-01,   1.72582781e-01,   1.73377483e-01,
            1.74172185e-01,   1.74966887e-01,   1.75761589e-01,
            1.76556291e-01,   1.77350993e-01,   1.78145695e-01,
            1.78940397e-01,   1.79735099e-01,   1.80529801e-01,
            1.81324503e-01,   1.82119205e-01,   1.82913907e-01,
            1.83708609e-01,   1.84503311e-01,   1.85298013e-01,

            1.86092715e-01,   1.86887417e-01,   1.87682119e-01,
            1.88476821e-01,   1.89271523e-01,   1.90066225e-01,
            1.90860927e-01,   1.91655629e-01,   1.92450331e-01,
            1.93245033e-01,   1.94039735e-01,   1.94834437e-01,
            1.95629139e-01,   1.96423841e-01,   1.97218543e-01,
            1.98013245e-01,   1.98807947e-01,   1.99602649e-01,
            2.00397351e-01,   2.01192053e-01,   2.01986755e-01,
            2.02781457e-01,   2.03576159e-01,   2.04370861e-01,
            2.05165563e-01,   2.05960265e-01,   2.06754967e-01,
            2.07549669e-01,   2.08344371e-01,   2.09139073e-01,
            2.09933775e-01,   2.10728477e-01,   2.11523179e-01,
            2.12317881e-01,   2.13112583e-01,   2.13907285e-01,

            2.14701987e-01,   2.15496689e-01,   2.16291391e-01,
            2.17086093e-01,   2.17880795e-01,   2.18675497e-01,
            2.19470199e-01,   2.20264901e-01,   2.21059603e-01,
            2.21854305e-01,   2.22649007e-01,   2.23443709e-01,
            2.24238411e-01,   2.25033113e-01,   2.25827815e-01,
            2.26622517e-01,   2.27417219e-01,   2.28211921e-01,
            2.29006623e-01,   2.29801325e-01,   2.30596026e-01,
            2.31390728e-01,   2.32185430e-01,   2.32980132e-01,
            2.33774834e-01,   2.34569536e-01,   2.35364238e-01,
            2.36158940e-01,   2.36953642e-01,   2.37748344e-01,
            2.38543046e-01,   2.39337748e-01,   2.40132450e-01,
            2.40927152e-01,   2.41721854e-01,   2.42516556e-01,


            2.43311258e-01,   2.44105960e-01,   2.44900662e-01,
            2.45695364e-01,   2.46490066e-01,   2.47284768e-01,
            2.48079470e-01,   2.48874172e-01,   2.49668874e-01,
            2.50463576e-01,   2.51258278e-01,   2.52052980e-01,
            2.52847682e-01,   2.53642384e-01,   2.54437086e-01,
            2.55231788e-01,   2.56026490e-01,   2.56821192e-01,
            2.57615894e-01,   2.58410596e-01,   2.59205298e-01,
            2.60000000e-01,   2.60794702e-01,   2.61589404e-01,
            2.62384106e-01,   2.63178808e-01,   2.63973510e-01,
            2.64768212e-01,   2.65562914e-01,   2.66357616e-01,
            2.67152318e-01,   2.67947020e-01,   2.68741722e-01,
            2.69536424e-01,   2.70331126e-01,   2.71125828e-01,

            2.71920530e-01,   2.72715232e-01,   2.73509934e-01,
            2.74304636e-01,   2.75099338e-01,   2.75894040e-01,
            2.76688742e-01,   2.77483444e-01,   2.78278146e-01,
            2.79072848e-01,   2.79867550e-01,   2.80662252e-01,
            2.81456954e-01,   2.82251656e-01,   2.83046358e-01,
            2.83841060e-01,   2.84635762e-01,   2.85430464e-01,
            2.86225166e-01,   2.87019868e-01,   2.87814570e-01,
            2.88609272e-01,   2.89403974e-01,   2.90198675e-01,
            2.90993377e-01,   2.91788079e-01,   2.92582781e-01,
            2.93377483e-01,   2.94172185e-01,   2.94966887e-01,
            2.95761589e-01,   2.96556291e-01,   2.97350993e-01,
            2.98145695e-01,   2.98940397e-01,   2.99735099e-01,

            3.00529801e-01,   3.01324503e-01,   3.02119205e-01,
            3.02913907e-01,   3.03708609e-01,   3.04503311e-01,
            3.05298013e-01,   3.06092715e-01,   3.06887417e-01,
            3.07682119e-01,   3.08476821e-01,   3.09271523e-01,
            3.10066225e-01,   3.10860927e-01,   3.11655629e-01,
            3.12450331e-01,   3.13245033e-01,   3.14039735e-01,
            3.14834437e-01,   3.15629139e-01,   3.16423841e-01,
            3.17218543e-01,   3.18013245e-01,   3.18807947e-01,
            3.19602649e-01,   3.20397351e-01,   3.21192053e-01,
            3.21986755e-01,   3.22781457e-01,   3.23576159e-01,
            3.24370861e-01,   3.25165563e-01,   3.25960265e-01,
            3.26754967e-01,   3.27549669e-01,   3.28344371e-01,


            3.29139073e-01,   3.29933775e-01,   3.30728477e-01,
            3.31523179e-01,   3.32317881e-01,   3.33112583e-01,
            3.33907285e-01,   3.34701987e-01,   3.35496689e-01,
            3.36291391e-01,   3.37086093e-01,   3.37880795e-01,
            3.38675497e-01,   3.39470199e-01,   3.40264901e-01,
            3.41059603e-01,   3.41854305e-01,   3.42649007e-01,
            3.43443709e-01,   3.44238411e-01,   3.45033113e-01,
            3.45827815e-01,   3.46622517e-01,   3.47417219e-01,
            3.48211921e-01,   3.49006623e-01,   3.49801325e-01,
            3.50596026e-01,   3.51390728e-01,   3.52185430e-01,
            3.52980132e-01,   3.53774834e-01,   3.54569536e-01,
            3.55364238e-01,   3.56158940e-01,   3.56953642e-01,

            3.57748344e-01,   3.58543046e-01,   3.59337748e-01,
            3.60132450e-01,   3.60927152e-01,   3.61721854e-01,
            3.62516556e-01,   3.63311258e-01,   3.64105960e-01,
            3.64900662e-01,   3.65695364e-01,   3.66490066e-01,
            3.67284768e-01,   3.68079470e-01,   3.68874172e-01,
            3.69668874e-01,   3.70463576e-01,   3.71258278e-01,
            3.72052980e-01,   3.72847682e-01,   3.73642384e-01,
            3.74437086e-01,   3.75231788e-01,   3.76026490e-01,
            3.76821192e-01,   3.77615894e-01,   3.78410596e-01,
            3.79205298e-01,   3.80000000e-01,   3.80794702e-01,
            3.81589404e-01,   3.82384106e-01,   3.83178808e-01,
            3.83973510e-01,   3.84768212e-01,   3.85562914e-01,

            3.86357616e-01,   3.87152318e-01,   3.87947020e-01,
            3.88741722e-01,   3.89536424e-01,   3.90331126e-01,
            3.91125828e-01,   3.91920530e-01,   3.92715232e-01,
            3.93509934e-01,   3.94304636e-01,   3.95099338e-01,
            3.95894040e-01,   3.96688742e-01,   3.97483444e-01,
            3.98278146e-01,   3.99072848e-01,   3.99867550e-01,
            4.00662252e-01,   4.01456954e-01,   4.02251656e-01,
            4.03046358e-01,   4.03841060e-01,   4.04635762e-01,
            4.05430464e-01,   4.06225166e-01,   4.07019868e-01,
            4.07814570e-01,   4.08609272e-01,   4.09403974e-01,
            4.10198675e-01,   4.10993377e-01,   4.11788079e-01,
            4.12582781e-01,   4.13377483e-01,   4.14172185e-01,


            4.14966887e-01,   4.15761589e-01,   4.16556291e-01,
            4.17350993e-01,   4.18145695e-01,   4.18940397e-01,
            4.19735099e-01,   4.20529801e-01,   4.21324503e-01,
            4.22119205e-01,   4.22913907e-01,   4.23708609e-01,
            4.24503311e-01,   4.25298013e-01,   4.26092715e-01,
            4.26887417e-01,   4.27682119e-01,   4.28476821e-01,
            4.29271523e-01,   4.30066225e-01,   4.30860927e-01,
            4.31655629e-01,   4.32450331e-01,   4.33245033e-01,
            4.34039735e-01,   4.34834437e-01,   4.35629139e-01,
            4.36423841e-01,   4.37218543e-01,   4.38013245e-01,
            4.38807947e-01,   4.39602649e-01,   4.40397351e-01,
            4.41192053e-01,   4.41986755e-01,   4.42781457e-01,

            4.43576159e-01,   4.44370861e-01,   4.45165563e-01,
            4.45960265e-01,   4.46754967e-01,   4.47549669e-01,
            4.48344371e-01,   4.49139073e-01,   4.49933775e-01,
            4.50728477e-01,   4.51523179e-01,   4.52317881e-01,
            4.53112583e-01,   4.53907285e-01,   4.54701987e-01,
            4.55496689e-01,   4.56291391e-01,   4.57086093e-01,
            4.57880795e-01,   4.58675497e-01,   4.59470199e-01,
            4.60264901e-01,   4.61059603e-01,   4.61854305e-01,
            4.62649007e-01,   4.63443709e-01,   4.64238411e-01,
            4.65033113e-01,   4.65827815e-01,   4.66622517e-01,
            4.67417219e-01,   4.68211921e-01,   4.69006623e-01,
            4.69801325e-01,   4.70596026e-01,   4.71390728e-01,

            4.72185430e-01,   4.72980132e-01,   4.73774834e-01,
            4.74569536e-01,   4.75364238e-01,   4.76158940e-01,
            4.76953642e-01,   4.77748344e-01,   4.78543046e-01,
            4.79337748e-01,   4.80132450e-01,   4.80927152e-01,
            4.81721854e-01,   4.82516556e-01,   4.83311258e-01,
            4.84105960e-01,   4.84900662e-01,   4.85695364e-01,
            4.86490066e-01,   4.87284768e-01,   4.88079470e-01,
            4.88874172e-01,   4.89668874e-01,   4.90463576e-01,
            4.91258278e-01,   4.92052980e-01,   4.92847682e-01,
            4.93642384e-01,   4.94437086e-01,   4.95231788e-01,
            4.96026490e-01,   4.96821192e-01,   4.97615894e-01,
            4.98410596e-01,   4.99205298e-01,   5.00000000e-01;

    MatrixN W(5,48); // 3x3x4x4 FxCxHHxWW
    W << -0.2       , -0.19790795, -0.1958159 , -0.19372385,
          -0.1916318 , -0.18953975, -0.1874477 , -0.18535565,
          -0.1832636 , -0.18117155, -0.1790795 , -0.17698745,
          -0.1748954 , -0.17280335, -0.1707113 , -0.16861925,

          -0.1665272 , -0.16443515, -0.1623431 , -0.16025105,
          -0.158159  , -0.15606695, -0.1539749 , -0.15188285,
          -0.14979079, -0.14769874, -0.14560669, -0.14351464,
          -0.14142259, -0.13933054, -0.13723849, -0.13514644,

          -0.13305439, -0.13096234, -0.12887029, -0.12677824,
          -0.12468619, -0.12259414, -0.12050209, -0.11841004,
          -0.11631799, -0.11422594, -0.11213389, -0.11004184,
          -0.10794979, -0.10585774, -0.10376569, -0.10167364,


          -0.09958159, -0.09748954, -0.09539749, -0.09330544,
          -0.09121339, -0.08912134, -0.08702929, -0.08493724,
          -0.08284519, -0.08075314, -0.07866109, -0.07656904,
          -0.07447699, -0.07238494, -0.07029289, -0.06820084,

          -0.06610879, -0.06401674, -0.06192469, -0.05983264,
          -0.05774059, -0.05564854, -0.05355649, -0.05146444,
          -0.04937238, -0.04728033, -0.04518828, -0.04309623,
          -0.04100418, -0.03891213, -0.03682008, -0.03472803,

          -0.03263598, -0.03054393, -0.02845188, -0.02635983,
          -0.02426778, -0.02217573, -0.02008368, -0.01799163,
          -0.01589958, -0.01380753, -0.01171548, -0.00962343,
          -0.00753138, -0.00543933, -0.00334728, -0.00125523,


           0.00083682,  0.00292887,  0.00502092,  0.00711297,
           0.00920502,  0.01129707,  0.01338912,  0.01548117,
           0.01757322,  0.01966527,  0.02175732,  0.02384937,
           0.02594142,  0.02803347,  0.03012552,  0.03221757,

           0.03430962,  0.03640167,  0.03849372,  0.04058577,
           0.04267782,  0.04476987,  0.04686192,  0.04895397,
           0.05104603,  0.05313808,  0.05523013,  0.05732218,
           0.05941423,  0.06150628,  0.06359833,  0.06569038,

           0.06778243,  0.06987448,  0.07196653,  0.07405858,
           0.07615063,  0.07824268,  0.08033473,  0.08242678,
           0.08451883,  0.08661088,  0.08870293,  0.09079498,
           0.09288703,  0.09497908,  0.09707113,  0.09916318,


           0.10125523,  0.10334728,  0.10543933,  0.10753138,
           0.10962343,  0.11171548,  0.11380753,  0.11589958,
           0.11799163,  0.12008368,  0.12217573,  0.12426778,
           0.12635983,  0.12845188,  0.13054393,  0.13263598,

           0.13472803,  0.13682008,  0.13891213,  0.14100418,
           0.14309623,  0.14518828,  0.14728033,  0.14937238,
           0.15146444,  0.15355649,  0.15564854,  0.15774059,
           0.15983264,  0.16192469,  0.16401674,  0.16610879,

           0.16820084,  0.17029289,  0.17238494,  0.17447699,
           0.17656904,  0.17866109,  0.18075314,  0.18284519,
           0.18493724,  0.18702929,  0.18912134,  0.19121339,
           0.19330544,  0.19539749,  0.19748954,  0.19958159,


           0.20167364,  0.20376569,  0.20585774,  0.20794979,
           0.21004184,  0.21213389,  0.21422594,  0.21631799,
           0.21841004,  0.22050209,  0.22259414,  0.22468619,
           0.22677824,  0.22887029,  0.23096234,  0.23305439,

           0.23514644,  0.23723849,  0.23933054,  0.24142259,
           0.24351464,  0.24560669,  0.24769874,  0.24979079,
           0.25188285,  0.2539749 ,  0.25606695,  0.258159  ,
           0.26025105,  0.2623431 ,  0.26443515,  0.2665272 ,

           0.26861925,  0.2707113 ,  0.27280335,  0.2748954 ,
           0.27698745,  0.2790795 ,  0.28117155,  0.2832636 ,
           0.28535565,  0.2874477 ,  0.28953975,  0.2916318 ,
           0.29372385,  0.2958159 ,  0.29790795,  0.3;

    MatrixN b(5,1);
    b << -0.1  , -0.025,  0.05 ,  0.125,  0.2;

    MatrixN y(7,45);
    y << 1.76779739e-01,   2.65259996e-01,   1.70990551e-01,
            2.41224417e-01,   3.49327828e-01,   2.32607720e-01,
            1.32183990e-01,   2.04901216e-01,   1.25048131e-01,

            7.33009781e-02,   1.06597661e-01,   7.39758098e-02,
            1.04108814e-01,   1.47252819e-01,   1.04110809e-01,
            6.74893458e-02,   9.79510377e-02,   6.68175067e-02,

           -3.01777827e-02,  -5.20646734e-02,  -2.30389315e-02,
           -3.30067888e-02,  -5.48221896e-02,  -2.43861010e-02,
            2.79470199e-03,  -8.99914101e-03,   8.58688243e-03,

           -1.33656544e-01,  -2.10727008e-01,  -1.20053673e-01,
           -1.70122392e-01,  -2.56897199e-01,  -1.52883011e-01,
           -6.18999418e-02,  -1.15949320e-01,  -4.96437419e-02,

           -2.37135304e-01,  -3.69389343e-01,  -2.17068414e-01,
           -3.07237995e-01,  -4.58972208e-01,  -2.81379922e-01,
           -1.26594586e-01,  -2.22899498e-01,  -1.07874366e-01,


           -1.60642079e-01,  -1.87867771e-01,  -1.71279282e-01,
           -2.21599379e-01,  -2.72079914e-01,  -2.36680096e-01,
           -2.24629887e-01,  -2.74082629e-01,  -2.36613760e-01,

           -3.14161379e-02,  -3.62571698e-02,  -3.55893208e-02,
           -4.84420461e-02,  -6.04576741e-02,  -5.49040705e-02,
           -5.66198288e-02,  -7.07598714e-02,  -6.21396825e-02,

            9.78098035e-02,   1.15353432e-01,   1.00100640e-01,
            1.24715287e-01,   1.51164565e-01,   1.26871955e-01,
            1.11390230e-01,   1.32562886e-01,   1.12334396e-01,

            2.27035745e-01,   2.66964033e-01,   2.35790601e-01,
            2.97872620e-01,   3.62786805e-01,   3.08647981e-01,
            2.79400288e-01,   3.35885644e-01,   2.86808473e-01,

            3.56261686e-01,   4.18574635e-01,   3.71480562e-01,
            4.71029954e-01,   5.74409044e-01,   4.90424007e-01,
            4.47410347e-01,   5.39208401e-01,   4.61282551e-01,


           -4.98063898e-01,  -6.40995539e-01,  -5.13549115e-01,
           -6.84423176e-01,  -8.93487656e-01,  -7.05967913e-01,
           -5.81443764e-01,  -7.53066475e-01,  -5.98275652e-01,

           -1.36133254e-01,  -1.79112001e-01,  -1.45154451e-01,
           -2.00992906e-01,  -2.68168168e-01,  -2.13918950e-01,
           -1.80729003e-01,  -2.39470781e-01,  -1.91096872e-01,

            2.25797390e-01,   2.82771537e-01,   2.23240212e-01,
            2.82437363e-01,   3.57151320e-01,   2.78130012e-01,
            2.19985757e-01,   2.74124913e-01,   2.16081909e-01,

            5.87728033e-01,   7.44655075e-01,   5.91634875e-01,
            7.65867633e-01,   9.82470808e-01,   7.70178974e-01,
            6.20700518e-01,   7.87720607e-01,   6.23260689e-01,

            9.49658677e-01,   1.20653861e+00,   9.60029538e-01,
            1.24929790e+00,   1.60779030e+00,   1.26222794e+00,
            1.02141528e+00,   1.30131630e+00,   1.03043947e+00,


           -8.35485716e-01,  -1.09412331e+00,  -8.55818948e-01,
           -1.14724697e+00,  -1.51489540e+00,  -1.17525573e+00,
           -9.38257641e-01,  -1.23205032e+00,  -9.59937543e-01,

           -2.40850370e-01,  -3.21966832e-01,  -2.54719582e-01,
           -3.53543767e-01,  -4.75878661e-01,  -3.72933830e-01,
           -3.04838178e-01,  -4.08181690e-01,  -3.20054061e-01,

            3.53784976e-01,   4.50189642e-01,   3.46379783e-01,
            4.40159439e-01,   5.63138075e-01,   4.29388068e-01,
            3.28581285e-01,   4.15686941e-01,   3.19829422e-01,

            9.48420322e-01,   1.22234612e+00,   9.47479149e-01,
            1.23386265e+00,   1.60215481e+00,   1.23170997e+00,
            9.62000748e-01,   1.23955557e+00,   9.59712904e-01,

            1.54305567e+00,   1.99450259e+00,   1.54857851e+00,
            2.02756585e+00,   2.64117155e+00,   2.03403187e+00,
            1.59542021e+00,   2.06342420e+00,   1.59959639e+00,


           -1.17290753e+00,  -1.54725107e+00,  -1.19808878e+00,
           -1.61007077e+00,  -2.13630314e+00,  -1.64454355e+00,
           -1.29507152e+00,  -1.71103417e+00,  -1.32159943e+00,

           -3.45567486e-01,  -4.64821663e-01,  -3.64284713e-01,
           -5.06094627e-01,  -6.83589155e-01,  -5.31948710e-01,
           -4.28947352e-01,  -5.76892599e-01,  -4.49011250e-01,

            4.81772562e-01,   6.17607748e-01,   4.69519355e-01,
            5.97881515e-01,   7.69124830e-01,   5.80646125e-01,
            4.37176813e-01,   5.57248968e-01,   4.23576935e-01,

            1.30911261e+00,   1.70003716e+00,   1.30332342e+00,
            1.70185766e+00,   2.22183882e+00,   1.69324096e+00,
            1.30330098e+00,   1.69139053e+00,   1.29616512e+00,

            2.13645266e+00,   2.78246657e+00,   2.13712749e+00,
            2.80583380e+00,   3.67455280e+00,   2.80583579e+00,
            2.16942514e+00,   2.82553210e+00,   2.16875330e+00,


           -1.51032935e+00,  -2.00037884e+00,  -1.54035861e+00,
           -2.07289457e+00,  -2.75771088e+00,  -2.11383136e+00,
           -1.65188539e+00,  -2.19001801e+00,  -1.68326133e+00,

           -4.50284602e-01,  -6.07676494e-01,  -4.73849843e-01,
           -6.58645488e-01,  -8.91299648e-01,  -6.90963590e-01,
           -5.53056527e-01,  -7.45603508e-01,  -5.77968439e-01,

            6.09760149e-01,   7.85025853e-01,   5.92658927e-01,
            7.55603591e-01,   9.75111585e-01,   7.31904181e-01,
            5.45772341e-01,   6.98810995e-01,   5.27324448e-01,

            1.66980490e+00,   2.17772820e+00,   1.65916770e+00,
            2.16985267e+00,   2.84152282e+00,   2.15477195e+00,
            1.64460121e+00,   2.14322550e+00,   1.63261733e+00,

            2.72984965e+00,   3.57043055e+00,   2.72567647e+00,
            3.58410175e+00,   4.70793405e+00,   3.57763972e+00,
            2.74343008e+00,   3.58764000e+00,   2.73791022e+00,


           -1.84775117e+00,  -2.45350661e+00,  -1.88262845e+00,
           -2.53571836e+00,  -3.37911862e+00,  -2.58311918e+00,
           -2.00869927e+00,  -2.66900186e+00,  -2.04492322e+00,

           -5.55001718e-01,  -7.50531325e-01,  -5.83414974e-01,
           -8.11196348e-01,  -1.09901014e+00,  -8.49978470e-01,
           -6.77165701e-01,  -9.14314417e-01,  -7.06925628e-01,

            7.37747735e-01,   9.52443958e-01,   7.15798498e-01,
            9.13325667e-01,   1.18109834e+00,   8.83162238e-01,
            6.54367868e-01,   8.40373022e-01,   6.31071961e-01,

            2.03049719e+00,   2.65541924e+00,   2.01501197e+00,
            2.63784768e+00,   3.46120682e+00,   2.61630295e+00,
            1.98590144e+00,   2.59506046e+00,   1.96906955e+00,

            3.32324664e+00,   4.35839452e+00,   3.31422544e+00,
            4.36236970e+00,   5.74131530e+00,   4.34944365e+00,
            3.31743501e+00,   4.34974790e+00,   3.30706714e+00;

         // inputShape: C, H, W; Kernel: F, HH, WW
    Convolution cv("{inputShape=[3,6,6];kernel=[5,4,4];stride=2;pad=1}");
    *(cv.params["W"])= W;
    *(cv.params["b"])=b;
    MatrixN y0=cv.forward(x, nullptr);

    return matComp(y,y0,"ConvolutionForward",eps);
}

bool checkConvolutionBackward(float eps=CP_DEFAULT_NUM_EPS) {
    MatrixN x(4, 75);
    x << 4.06278962e-01,  -7.20029839e-01,  -8.77595062e-01,
           -5.69242505e-01,  -8.21071312e-02,
            3.02672415e-01,   3.11544794e-01,   6.78850317e-01,
            3.05781256e-01,  -7.35247080e-01,
            8.45416516e-01,   6.30175765e-01,   8.86099717e-01,
            4.06562604e-01,  -6.02540397e-01,
            7.59952834e-01,  -1.40269820e+00,   1.55009322e+00,
           -2.13764150e-01,  -1.63679882e+00,
            9.37892883e-01,   9.34623693e-01,   2.29637694e-01,
           -3.94409953e-01,   3.19363695e-01,

            1.40073427e+00,   7.65295699e-02,   2.59006411e+00,
            1.18691543e+00,   4.27904098e-01,
           -5.25571140e-02,   1.07981772e+00,   5.96898409e-01,
            1.25859787e+00,  -3.11337115e-01,
            5.49745455e-01,  -1.50192516e-01,   2.49671770e+00,
           -5.76520517e-01,   2.90206527e-01,
            6.83069753e-01,  -1.20577354e+00,  -7.83062617e-02,
           -3.57863145e-02,  -6.89859016e-01,
           -1.27705615e+00,  -3.38617839e-01,   6.57145506e-01,
           -7.13872291e-01,  -2.25710594e-01,

           -5.84950028e-01,   7.83725053e-01,   1.09521467e+00,
            1.58652641e+00,  -6.59051523e-01,
           -6.93647850e-01,  -4.62172438e-02,  -9.68867074e-01,
            1.04253518e-01,   3.65878113e-01,
           -6.20436137e-01,  -5.21133678e-01,  -4.51238975e-01,
           -8.66231129e-01,  -9.77512021e-02,
           -3.97595314e-01,   8.32288960e-02,   8.38346031e-02,
           -9.61101576e-01,   5.56323841e-01,
           -1.49203774e+00,  -7.62849617e-01,  -1.31800939e+00,
           -1.01578863e-01,  -1.34451982e+00,


            1.11629214e-02,   3.71619500e-01,   6.25515403e-01,
            5.44265433e-01,   2.58030608e+00,
           -2.89689208e+00,   1.03056164e+00,   1.43447215e+00,
            6.74738238e-01,  -1.84511911e+00,
           -3.22239263e-01,   1.74348499e+00,  -3.08882289e-01,
            7.95603854e-01,   6.47311433e-01,
           -3.02989147e+00,   9.76613215e-01,   8.84297919e-01,
           -1.45695523e+00,  -4.42325369e-01,
            1.18824527e+00,  -1.96667526e+00,  -1.05092338e+00,
            1.30854716e+00,  -4.53888024e-01,

           -3.79884804e-01,  -2.91014221e-01,   4.55696906e-01,
            3.18405851e-01,  -9.25646477e-01,
           -7.16927311e-01,  -2.01962127e-01,  -6.92560414e-01,
            8.30975784e-01,   7.22272760e-02,
           -9.96090540e-01,   3.99141248e-01,   3.61328510e-01,
           -1.40803404e+00,   6.65305291e-01,
           -1.59518843e-01,   4.43236368e-01,   2.04742247e-01,
           -9.62888055e-01,  -1.09431312e+00,
            1.28505241e-01,   8.07790580e-01,  -4.49374715e-01,
           -4.32796239e-01,   2.52893798e-01,

           -9.76817124e-02,   3.01471234e-02,  -2.82646447e-01,
           -1.18352895e+00,  -1.29873542e+00,
            8.43541861e-01,  -2.12674598e+00,   3.51783908e-01,
            7.14241258e-01,  -4.46955064e-01,
            6.92582940e-01,   1.45896797e+00,  -1.38710841e-01,
           -3.30895817e-01,   1.76373937e+00,
           -6.07684612e-02,  -2.27203416e+00,   7.18466352e-01,
            2.66887655e-02,  -8.60609702e-01,
            1.19592511e-01,  -6.65513272e-02,  -8.71728299e-01,
            8.29179762e-01,   1.32132812e+00,


           -9.84332692e-01,   1.62471472e+00,   6.49340001e-02,
            4.34797318e-01,  -1.35201297e-02,
            3.39988538e-01,   7.18879625e-01,   2.27799525e-01,
            7.55022197e-01,   2.25099181e-01,
           -3.31853138e-01,   6.92662234e-01,  -6.04908597e-01,
            8.29683534e-01,   1.29697634e+00,
           -5.56083891e-01,  -2.21421171e+00,   3.04101703e-01,
            7.72354427e-01,  -1.55229213e+00,
            1.89806416e+00,   7.26569169e-01,   6.54962282e-01,
           -1.08347656e+00,   1.15445419e+00,

            7.14851333e-01,   1.11924154e+00,   9.18968653e-01,
            1.45678203e+00,  -1.91415949e+00,
           -9.37495099e-01,   3.73281474e-01,   2.85868528e-01,
            4.31681231e-01,   6.62499088e-02,
           -1.48617873e+00,   5.57715334e-01,  -4.81057503e-01,
            6.87051463e-01,  -1.12790482e+00,
           -9.85240951e-01,  -1.67914658e+00,  -3.37574029e-01,
           -6.03822018e-02,  -6.09262194e-01,
            3.25978304e-01,   1.28333212e+00,  -5.41023192e-01,
            1.69426400e+00,  -2.74843013e-01,

           -1.27214735e+00,   6.93215016e-01,   7.16647831e-01,
           -1.09714483e+00,   1.23395484e+00,
            1.24751835e+00,   8.02806678e-01,   3.16606600e-01,
            1.90285586e+00,  -4.29496923e-01,
            2.51115376e-01,  -2.81213797e-01,   1.33733071e+00,
            5.71380011e-01,   5.58810987e-01,
           -6.41888643e-02,  -1.19084509e+00,   1.30599784e+00,
            1.08158035e+00,  -3.00621112e-01,
           -1.88638872e+00,   7.65711879e-01,  -6.86007084e-01,
            1.20789193e+00,   1.09465112e-03,


            4.42305847e-01,  -3.20980999e-01,   1.72799329e-01,
           -8.09578504e-01,   1.32848119e+00,
           -1.27895152e+00,   7.48160611e-01,   1.78569662e+00,
           -1.29630689e-01,  -6.57212483e-02,
           -5.68001480e-01,  -9.61151324e-01,   5.45035751e-01,
           -4.23175743e-01,   5.69798706e-01,
            1.84703153e+00,   2.20249121e-01,  -9.85408467e-01,
            1.42521634e-01,  -7.85362836e-01,
           -5.01210976e-01,   6.94574909e-01,  -8.23125847e-01,
            5.60644174e-01,  -7.49678428e-01,

           -1.93092403e+00,   1.11070681e+00,  -2.03649206e+00,
            4.50199934e-01,  -1.61569811e+00,
            6.62548119e-01,   1.99394670e+00,  -3.52990460e-01,
            1.87800598e+00,   1.10399472e-01,
            4.17827766e-01,   1.29448810e+00,   1.17098064e+00,
            1.62768992e+00,  -3.23464275e-01,
           -4.80745974e-01,  -1.87674952e-01,  -1.55835540e+00,
            5.59698707e-01,  -1.61064340e+00,
           -2.88041566e-01,  -4.98061608e-01,  -4.33308895e-01,
           -3.04804433e-01,  -2.01560459e-01,

            1.18815415e+00,  -3.61940600e-01,  -6.77218261e-01,
            8.11354952e-01,  -1.55021295e-01,
           -5.11231428e-01,  -3.66514256e-01,   1.36405386e+00,
            1.76692645e+00,   1.25480705e+00,
           -3.89975255e-01,   8.44315729e-02,   9.87579716e-01,
            3.72766182e-01,   1.01085418e+00,
           -1.96303607e+00,   9.59423670e-02,  -4.86589955e-02,
           -7.59032117e-01,  -1.44189138e-01,
           -1.36984009e+00,  -4.54511774e-01,   1.13057305e+00,
           -1.98191411e+00,  -3.29108429e-02;
    MatrixN W(2,27);
    W << -0.35513837,  1.08467349, -0.35145376,
          -0.72134629, -0.57565924, -2.01889725,
           0.71046437,  1.40272846,  0.87700153,

           0.10473475, -1.24258858, -2.13811078,
           0.12652192,  0.58375631,  0.52330807,
           0.19711781,  2.00618897,  0.02234399,

           0.62735645,  1.38290462,  0.05514387,
          -0.0482102 , -1.38552821, -0.58664296,
          -0.05557414, -0.81669299,  0.08555432,


          -0.33726335, -0.35330311, -0.27365944,
           0.752816  , -0.02478639,  0.88443971,
           0.02507951,  0.38114787, -0.53996567,

           0.9637172 ,  0.66837392,  0.04000791,
           0.87730628, -0.78766236,  0.09188994,
           0.74565225,  0.07085615, -0.05643064,

           0.07628749, -0.71903468, -0.59633026,
           0.16882438, -1.63386718,  0.05015518,
           1.20848431, -0.93531694,  0.80268051;
    MatrixN b(2,1);
    b <<  -0.48903285, -0.39030338;
    MatrixN dx(4, 75);
    dx << -1.05124493e+00,  -2.29874859e+00,  -9.73966637e-01,
           -3.37391974e+00,  -6.32150176e-01,
            1.60616065e+00,   2.15316518e+00,   3.20621313e-01,
            1.13937584e-01,  -3.21442956e+00,
            2.24212655e+00,  -4.42366045e+00,   1.32103657e+00,
           -2.19160747e+00,  -3.04093836e+00,
           -7.29661319e-01,   1.66222856e+00,   3.28816635e-01,
           -1.59753791e+00,  -1.33415970e+00,
            2.56879843e-01,   1.27687306e+00,   3.78606241e-01,
           -1.94462219e-01,   1.12236159e+00,

            2.49715723e+00,  -2.79149068e+00,  -1.05936217e+00,
           -3.51867321e+00,   5.95934762e-01,
           -3.02576129e+00,  -2.51966245e+00,   1.90066609e+00,
           -4.19301715e+00,  -2.48896161e+00,
           -1.42982951e+00,   7.66906326e-01,   1.66484653e+00,
           -1.29710099e+00,  -2.40306365e+00,
            2.89544608e+00,   2.07347535e+00,   9.32642406e-01,
           -2.45991624e+00,   1.39608510e+00,
           -5.38411133e-01,   2.18724772e+00,   5.36120619e+00,
           -6.59577634e-01,  -3.44781960e+00,

           -1.45689068e+00,  -1.86508989e+00,   8.26057589e-01,
           -1.22345977e+00,   4.16844969e+00,
           -1.20883333e+00,  -3.16983941e+00,   1.35396590e+00,
           -3.61262425e+00,   6.35665455e+00,
           -3.88149445e+00,   1.52888318e+00,  -5.12807222e-01,
           -1.53637746e+00,   2.64847781e-01,
           -4.62258725e+00,   5.06798935e+00,  -2.52076588e+00,
           -6.33453363e+00,  -2.43650195e-01,
           -4.24293924e+00,   2.36201816e+00,  -3.99325433e+00,
           -4.99940613e+00,   4.44596711e+00,


           -5.79238458e-01,  -1.33661598e+00,   4.65564246e+00,
            2.95987665e+00,   2.14203246e+00,
            1.69120963e+00,  -1.00955270e+00,  -1.56959716e+00,
           -4.80704379e+00,  -3.58121519e+00,
            1.61607936e+00,   3.97857094e+00,   2.50857403e+00,
            1.42249803e+00,   2.35444446e+00,
           -2.47712038e-01,  -5.86756713e+00,  -2.44594050e+00,
           -1.83816661e+00,  -1.45681870e-01,
           -1.28534449e+00,  -3.05204753e-01,  -1.09084146e+00,
            1.33737462e+00,   1.12182440e+00,

            3.60100014e+00,   6.75735422e-01,  -5.51404057e+00,
           -2.58088363e+00,  -7.02856364e-01,
            6.31473410e+00,  -1.15029320e+00,   3.64919006e+00,
            2.89944274e+00,  -2.45077934e+00,
           -5.54874511e+00,  -4.82090962e+00,  -1.69319209e+00,
            3.25013436e-01,   3.12000720e-01,
           -2.42610232e+00,  -2.73301586e+00,  -4.91398320e-01,
           -1.42607512e+00,  -9.53401124e-01,
            5.10246591e-04,   2.95690939e+00,   3.77013647e-01,
            1.87054330e+00,   2.72208545e+00,

           -5.03891926e-01,  -2.51765436e-01,  -1.11797102e+00,
           -3.17096204e-01,   3.49341593e+00,
            1.79220668e+00,  -1.57405679e+00,   2.08514649e+00,
            1.74235469e+00,   8.98609184e-01,
            2.55306356e+00,  -1.07878915e+00,   3.78724641e+00,
            1.76701943e+00,  -2.45530386e+00,
            2.29703711e+00,   4.65073974e+00,   1.34026012e+00,
           -6.42727069e-01,  -3.04798824e+00,
           -2.72556843e+00,   1.58668575e-01,  -3.55042552e+00,
            1.24294202e+00,   6.04326193e-03,


            1.46164065e+00,  -2.13003289e+00,   1.65809409e+00,
           -2.63070942e+00,   9.51286555e-01,
            2.63777114e+00,  -3.86190648e+00,   3.83261085e+00,
            1.09964350e+00,  -8.17842653e-01,
           -2.21345155e+00,  -4.18793533e+00,   3.41899518e+00,
           -3.07799721e+00,   1.36377794e+00,
            2.00054365e+00,   7.59555538e-01,  -9.32959063e-01,
           -5.92048740e-01,   1.89336573e+00,
            1.27429784e+00,   9.35228356e-01,   1.98937016e+00,
            2.43316250e+00,  -1.59694729e-01,

           -1.15985782e+00,  -2.28389966e+00,   2.21404222e+00,
           -7.82713570e-02,   4.08077281e-01,
           -3.57324982e+00,  -4.51360523e+00,   5.17732440e+00,
           -1.32316465e+00,  -1.65582742e-01,
            4.19573522e+00,  -3.82004696e+00,  -3.09166608e+00,
            3.24012426e+00,   3.34803889e+00,
            5.71596737e+00,  -6.19345957e+00,   4.75712600e+00,
            4.04089454e+00,   3.13782543e-02,
            8.06086994e-02,  -3.15779825e+00,   3.60781644e+00,
           -1.93018150e+00,   9.71445495e-01,

            1.98980950e+00,  -1.17287648e+00,   1.36591250e+00,
           -1.96444065e-01,  -2.18003084e+00,
            2.03618880e+00,  -1.43101590e+00,   5.30990912e+00,
            9.20580520e-01,  -4.20831837e+00,
           -6.89307507e+00,   1.48581582e+00,   3.39243604e+00,
           -1.16846891e+00,  -7.63470010e-01,
           -3.46039040e+00,  -3.40441746e+00,   9.60571960e-01,
            5.59337395e-01,  -3.13771560e+00,
            2.90251298e+00,  -5.41293335e+00,   8.64403001e+00,
           -1.58639128e-02,  -2.26159459e+00,


            8.20516613e-01,  -1.41506452e+00,  -1.73812035e+00,
           -1.82298142e+00,  -4.63543831e+00,
            8.56015738e-01,   5.82692858e-01,   2.80887781e-01,
            4.43001557e+00,   1.95440071e+00,
           -8.07785952e-01,  -2.24514804e+00,   2.55516978e+00,
           -1.17418985e+00,   3.52573378e+00,
            3.87510665e+00,   2.05495609e+00,  -1.73932865e+00,
           -3.54592589e+00,   1.65528346e+00,
           -2.96614012e+00,  -4.39427109e+00,  -3.03805747e+00,
           -2.42601391e-01,  -8.07440715e-01,

            2.02703143e+00,  -1.24179770e+00,  -1.36030480e+00,
            5.85247950e+00,  -1.51857521e+00,
            3.68622334e+00,  -4.01367285e+00,   1.61578132e-01,
            6.10189585e+00,   4.33120913e+00,
            1.64988685e+00,   3.16788640e+00,  -4.08750855e+00,
            2.96251526e+00,  -1.55318546e+00,
            2.02963383e-01,  -6.39720240e+00,  -2.54262042e+00,
           -3.99168408e+00,   1.69465793e+00,
            1.20834842e+00,   1.77218343e+00,   2.62972331e+00,
           -2.73859387e+00,   9.98315627e-01,

            2.23445472e+00,   9.39657519e-01,  -3.27009717e+00,
            1.26660541e+00,  -3.48211453e+00,
            7.13634600e+00,  -3.95823798e+00,  -2.40368353e+00,
            2.06784867e+00,  -2.29939699e+00,
            8.36871307e-01,  -4.39283210e+00,   2.55545879e+00,
            4.32675205e+00,  -1.84820468e+00,
            5.52361859e+00,   1.00335734e+00,  -3.77979654e-02,
            3.98715622e+00,  -4.14629493e+00,
            2.32110000e+00,  -2.31618185e+00,  -2.40899216e+00,
           -3.90533589e+00,   2.69809612e-01;
    MatrixN dW(2,27);
    dW << 7.76312149,   4.66733323,   8.1890197 ,
           -4.37454191,  -8.17503308,   9.13918729,
           15.45904902,  10.25547064,  -5.66654275,

            2.5788164 ,  -0.52958419,   5.25793559,
           -5.94902815,  -2.16831493,   4.49496134,
           12.40914405,  -2.33356582,   7.40659252,

           -5.33814293,   0.80389108,  -6.77465292,
          -10.76069027,   0.76758755,  -1.65334302,
            3.82291043,  14.45696049, -10.832082  ,


            1.8697618 , -10.03973545, -17.97308064,
           -2.74154261,  12.05158818,  -3.25524939,
           -4.35128392,  19.07935165,   6.61602367,

           -0.86482772,  -1.00336309, -17.05030267,
            0.64635664,  -9.738997  , -21.12904455,
           -0.13885334,   2.11260808,  -8.50269923,

           -1.70975933, -11.79444595,  -0.87365394,
            6.52065458, -11.94349945, -15.29530413,
           -7.73371842,   3.40362722,  -8.78586713;
    MatrixN db(2,1);
    db << 17.65964691,  -5.23295028;
    MatrixN dchain(4,50);
    dchain << 0.24836283,  0.33590279,  1.63346454,  0.21689593, -1.62253881,
          -0.03400353,  1.11333587,  0.29573696,  0.51460659, -1.33410048,
           1.64547739, -0.1804801 ,  1.24025162, -0.45958495, -0.20283745,
           1.03576165, -0.15000759,  0.68291561,  0.7009178 , -1.4762639 ,
          -0.53490811,  1.4532825 ,  1.05732343, -0.43142658, -0.90043725,

           0.06497122,  0.78454725, -1.37572605,  0.02429663, -1.81137879,
           2.45372871, -0.13105885, -0.24501502, -0.55008119, -0.80020087,
          -0.02043736, -0.18257312, -0.04522444, -0.60268432, -0.583198  ,
           0.48290751, -1.52625924,  0.77698356,  1.34897691, -0.22028905,
           1.02520125, -0.6235423 ,  0.6826662 ,  2.25821506, -0.16988704,


           1.92547065, -0.7597674 ,  0.02650591,  0.48386609, -1.49018314,
          -0.66160909,  0.56016673,  0.63646527, -0.16713383,  0.67827109,
          -0.11408664, -0.46282622, -0.12305173, -0.2496889 ,  0.0981504 ,
           0.83435664,  0.26198835,  0.60408632,  0.24423178,  0.93440163,
           1.14636587,  0.37361258,  0.51775075,  0.05434362, -0.05941737,

          -1.13597924,  0.98548132,  2.31747878,  1.39949287, -0.12533536,
          -0.87270972,  0.53574251, -2.23364113, -1.25404886,  0.33237128,
           1.25517806,  0.17953582, -0.11638751, -0.03338221,  0.4097034 ,
          -1.70492966, -1.62322879, -0.83435909,  0.36162776,  1.38937947,
          -0.1061854 , -1.36092404,  1.12713214, -0.77828978, -1.06868978,


          -0.18555716,  0.30072344,  0.91104691, -0.37014742,  1.00090184,
           0.77200082, -1.02904854,  0.57819312,  0.1680283 ,  0.44558377,
           2.48122876, -1.66522128,  0.7411329 ,  0.847575  , -0.51789978,
          -0.98162056,  1.05644732,  1.09088424, -1.62324965,  1.24645441,
          -0.67473992, -0.18413263, -1.07650479,  0.27888282, -0.82877504,

          -0.77243645,  0.10673591, -0.20076532,  1.05422291,  0.32635894,
          -0.13274228, -0.65980658, -1.44102273, -0.03213447,  1.63368114,
           0.55986992, -0.25727178, -1.04349709, -0.24595085, -0.01306534,
           0.97272734,  0.82970104, -2.10186315,  0.75964172,  0.37648694,
          -0.55357048,  1.29400895, -2.55335323, -0.1089839 ,  1.43315407,


           1.10654948, -1.27725299,  1.60625794,  1.11783959,  0.35670366,
          -0.56180823,  1.2036319 , -1.54174391,  1.01668209, -0.36368006,
           1.03223669, -0.5135541 , -0.01485799, -1.71322876,  0.87569716,
          -0.52929955, -0.40194623,  0.71189275, -1.06158617,  0.58602659,
           1.30356907,  1.15644221,  0.38860402,  0.89430991, -0.63994114,

          -1.25225268,  1.13437715, -0.12101369, -1.47669536,  1.00405199,
          -2.06014007,  0.11820221,  0.30668661, -0.34604699,  0.52438995,
          -0.20236412,  0.91509269, -1.12761561, -1.68432089,  1.57649879,
          -0.31282652,  0.71725415,  0.03513737,  0.10890985, -0.99803075,
          -1.6124455 , -0.3881734 ,  0.90206887,  1.34225259,  0.37395634;

    Convolution cv("{inputShape=[3,5,5];kernel=[2,3,3];stride=1;pad=1}");
    *(cv.params["W"])=W;
    *(cv.params["b"])=b;
    t_cppl cache;
    t_cppl grads;
    MatrixN y=cv.forward(x, &cache);
    MatrixN dx0=cv.backward(dchain, &cache, &grads);
    bool allOk=true;
    bool ret=matComp(dx,dx0,"ConvolutionBackward dx",eps);
    if (!ret) allOk=false;
    ret=matComp(dW,*(grads["W"]),"ConvolutionBackward dW",eps);
    if (!ret) allOk=false;
    ret=matComp(db,*(grads["b"]),"ConvolutionBackward bx",eps);
    if (!ret) allOk=false;
    cppl_delete(&cache);
    cppl_delete(&grads);
    return allOk;
}

bool checkPoolingForward(floatN eps=CP_DEFAULT_NUM_EPS) {
    MatrixN x(2,3*4*4); // 2x3x4x4 NxCxHxW
    x << -0.3       , -0.29263158, -0.28526316, -0.27789474,
          -0.27052632, -0.26315789, -0.25578947, -0.24842105,
          -0.24105263, -0.23368421, -0.22631579, -0.21894737,
          -0.21157895, -0.20421053, -0.19684211, -0.18947368,

          -0.18210526, -0.17473684, -0.16736842, -0.16      ,
          -0.15263158, -0.14526316, -0.13789474, -0.13052632,
          -0.12315789, -0.11578947, -0.10842105, -0.10105263,
          -0.09368421, -0.08631579, -0.07894737, -0.07157895,

          -0.06421053, -0.05684211, -0.04947368, -0.04210526,
          -0.03473684, -0.02736842, -0.02      , -0.01263158,
          -0.00526316,  0.00210526,  0.00947368,  0.01684211,
           0.02421053,  0.03157895,  0.03894737,  0.04631579,


           0.05368421,  0.06105263,  0.06842105,  0.07578947,
           0.08315789,  0.09052632,  0.09789474,  0.10526316,
           0.11263158,  0.12      ,  0.12736842,  0.13473684,
           0.14210526,  0.14947368,  0.15684211,  0.16421053,

           0.17157895,  0.17894737,  0.18631579,  0.19368421,
           0.20105263,  0.20842105,  0.21578947,  0.22315789,
           0.23052632,  0.23789474,  0.24526316,  0.25263158,
           0.26      ,  0.26736842,  0.27473684,  0.28210526,

           0.28947368,  0.29684211,  0.30421053,  0.31157895,
           0.31894737,  0.32631579,  0.33368421,  0.34105263,
           0.34842105,  0.35578947,  0.36315789,  0.37052632,
           0.37789474,  0.38526316,  0.39263158,  0.4;
    MatrixN y(2,12);
    y << -0.26315789, -0.24842105,
         -0.20421053, -0.18947368,
         -0.14526316, -0.13052632,
         -0.08631579, -0.07157895,
         -0.02736842, -0.01263158,
          0.03157895,  0.04631579,
          0.09052632,  0.10526316,
          0.14947368,  0.16421053,
          0.20842105,  0.22315789,
          0.26736842,  0.28210526,
          0.32631579,  0.34105263,
          0.38526316,  0.4;
         // inputShape: C, H, W; kernel: F, HH=stride, WW=stride
    Pooling pl("{inputShape=[3,4,4];stride=2}");
    MatrixN y0=pl.forward(x, nullptr);

    return matComp(y,y0,"PoolingForward",eps);
}

bool checkPoolingBackward(float eps=CP_DEFAULT_NUM_EPS) {
    MatrixN x(3, 2*8*8);
    x << -0.20821944,  0.76470027, -0.42823441,  0.23081636, -0.7821132 ,
          -0.19361657, -0.25946762, -1.01735498,
          -1.21951272,  0.49819365, -0.44809611,  0.92079144, -0.56857596,
          -0.27794466, -1.88411009,  1.90659228,
          -0.47273599, -0.94183724, -1.15399693,  0.44185057,  1.3521356 ,
           0.038481  , -0.84776888,  0.05535332,
          -0.12486817,  0.48866677, -0.24764457,  0.05246682,  1.96750726,
           0.48715605,  0.17504119,  0.82134656,
          -0.42960705,  1.77148609,  0.16379425, -0.29082004,  0.52326352,
           1.47661533, -0.19514707,  1.57767945,
          -0.07487967, -1.51977691, -0.59051645, -0.22851541,  1.59730828,
          -1.04449441,  1.48661379,  0.86497631,
           0.65681371,  0.50023527, -1.68840264,  0.72449393,  0.06154832,
          -0.82007799, -0.02014138, -0.86370724,
           1.58534327,  1.14112418, -0.48090446, -0.042038  ,  0.50606844,
          -0.10656982, -0.03190944, -1.07508596,

          -0.35814308,  0.45472176, -0.23336728,  0.90551898, -0.99163112,
           0.35008976, -0.25482636,  0.19915775,
          -0.77842405, -0.82473092, -0.51410154, -0.08928771, -0.41909776,
          -1.95161101,  1.10078008,  0.11088705,
          -0.24577978,  1.09930858,  0.05714487,  1.36417158,  0.02176026,
          -1.95798167, -0.26250676, -1.19025748,
           1.09570083, -0.06226364,  0.80339967, -0.0758211 , -0.18690804,
           1.49729031, -0.82952823,  0.33878078,
           1.46551033, -1.02128691, -0.91337491,  1.23652237, -0.09419522,
          -0.17977637,  0.75537251, -0.14552913,
           0.61578288, -1.20124727, -1.85926884,  1.3757701 , -1.02581886,
           1.303463  ,  0.73080734, -1.20004489,
           0.21973867,  0.29373124,  1.99159088, -1.11957381,  0.2658984 ,
           0.26915953,  0.27556056,  0.49136136,
           0.3612057 ,  0.07358504,  0.73521503,  1.07389274,  0.60949853,
          -0.38312498,  0.89033768,  0.91623125,


          -1.76705153, -1.73491261,  0.21020303,  0.38171743, -0.48405564,
          -1.57386388,  0.87403613,  0.54136034,
           1.53814942,  0.74653043,  0.97793464,  0.05471139, -1.4336575 ,
          -0.24236267, -1.05111491, -0.94523348,
          -0.75268226,  0.0816029 , -0.05990043,  0.11669214,  0.08999444,
           0.82241626,  0.712311  ,  0.16681093,
           1.56757749,  0.84085497, -1.03778945,  0.18714578,  0.6166835 ,
           0.06464151,  1.77329425,  0.53635759,
           1.59541903, -0.10955936,  0.09776589, -0.43620696, -0.88174536,
          -0.13463976,  1.32932224, -1.5940335 ,
          -0.57096876,  0.48208184, -0.60498125,  0.4741654 ,  0.18197066,
          -1.23380724, -1.23998288, -0.50275103,
           3.49827418,  1.15780691,  0.14641761, -0.17350691, -0.18374094,
           0.3106503 ,  0.05314125,  0.87079586,
          -0.90732427, -1.20416999,  1.68494269, -2.22035246, -0.50020293,
          -0.07189888,  0.46373325, -0.05885692,

          -0.18307148,  0.17351858,  0.36120907, -0.47482548, -0.2414964 ,
           0.23315281, -1.09976171,  0.03012353,
          -1.20211889,  1.0827036 , -0.97788039, -0.67809763,  0.51644967,
          -0.27490245,  0.0478945 , -1.49470066,
          -0.036517  ,  0.33607844,  0.02106272,  0.34517926, -0.44099748,
          -1.37764821, -0.4377515 ,  2.2515369 ,
          -0.37733989, -0.36166212, -2.13904   , -0.66325432,  0.52422798,
           3.51735895, -0.09820525,  0.1784247 ,
           0.25951956,  0.94219836, -0.57460869, -0.54582794, -1.61570535,
          -0.18259026, -0.17537327,  0.81053405,
           1.72576168, -0.22244469, -0.58099542,  0.01594571,  0.55960778,
           0.37940704,  0.31612082, -0.49076277,
          -0.05711323,  1.97590329,  0.24268064, -1.02724374,  1.63612621,
          -0.43711261, -1.0679252 ,  0.17733876,
           0.08950617, -1.33003954, -1.51386604,  0.24203421,  1.57305846,
          -0.83314106,  0.38760212,  2.10037992,


           0.97310772, -0.70923623,  0.32140762, -2.75490947, -0.06021106,
          -0.11980104,  0.78990898, -0.94220543,
           1.94565408,  1.26863143,  0.9039833 , -0.19637166,  0.01524785,
           0.79755599, -1.10231533,  0.45860753,
           0.82711965, -0.45613535, -0.78245238, -0.04901804, -1.6139697 ,
          -1.99214353,  0.00877878, -0.22394173,
           1.14287009, -0.4194935 ,  0.97040715, -0.30421962,  0.78563701,
           1.04483927, -0.4125141 ,  0.1052007 ,
          -0.8521989 ,  0.6826181 ,  1.1029444 , -0.32969948, -0.06845776,
          -1.0790365 , -0.43846153, -0.15257518,
          -0.53943044,  0.58558499,  0.60449336, -0.34634213, -0.60843111,
          -1.58272669,  1.2009205 ,  0.42710111,
           1.38534904, -1.41947659, -1.16212324, -0.32895225,  0.55225572,
           1.28587717, -0.61798035,  1.07671263,
          -0.10431983, -0.0582642 ,  0.17034094, -1.39658426, -0.43604526,
          -1.84565462,  1.74213715, -0.53842971,

           0.27123878,  1.11081723,  0.67191105,  0.63904708, -1.23442157,
          -0.33489185,  1.05717369,  0.62583597,
          -0.17689927, -0.31854626,  0.22574472,  0.63169287, -2.71288479,
           1.99653206,  0.21683901,  0.74752754,
           0.12947894,  1.5077572 , -0.46006936,  1.53470713,  0.37041118,
           0.63741785, -2.37744153,  0.28781378,
          -0.2151778 , -0.09469675, -0.85938255, -2.23271977, -0.33938592,
          -1.50763285, -0.42199155,  1.18545128,
          -1.47395027,  0.05590323, -0.20287167, -1.29859336, -0.06927397,
           0.7785629 , -0.32867654,  0.75829549,
           1.19794092, -0.71202494,  0.85842106, -0.30092262,  1.17083144,
           0.24035558, -1.07172363, -0.07449393,
           0.32310846,  0.06665681, -0.88290151,  0.42169145,  0.49928071,
          -0.25150176,  0.38966503,  2.17860381,
          -1.24330528,  0.00585855, -1.17676122,  0.1536678 , -0.67161206,
           1.3949744 ,  0.30369064, -1.02368514;
    MatrixN dchain(3,2*4*4);
    dchain << 1.29374452, -0.31671873,  0.84842249, -1.4721032 ,
          -0.34921717, -1.9646576 ,  0.68748776,  1.71009631,
          -1.06116246,  0.07276335,  1.75090416,  1.21168054,
          -0.39189565,  1.30593839,  0.93956115,  0.25105781,

          -0.4560326 ,  0.97480044, -1.3597251 , -0.23181517,
           0.12403004,  0.83317537, -1.52263223,  0.15419263,
          -1.19366621, -0.95997357,  0.30999145,  1.33168829,
           0.19031117, -0.36261005,  0.46397314, -2.38480408,


          -0.58552865, -0.13871152, -0.65902429,  1.80143258,
           0.64211802, -0.01029485, -1.79380576,  0.75943923,
          -0.41885403,  0.26041765, -0.4883311 ,  0.10832315,
           0.07752951,  1.37929608,  1.15592811, -0.85945464,

          -0.51382159, -0.92172661, -1.42632614,  0.82134494,
           0.88597893, -0.33538864, -0.08146537,  1.0791449 ,
           0.1157789 , -0.06358474,  1.6672031 , -0.06467902,
          -1.23959368, -1.18716685, -0.67859249,  1.43853299,


          -0.83655323,  1.18295151, -1.62708353, -1.41749206,
           0.02751224,  0.52466305, -0.43795283, -1.44280928,
          -1.4918993 ,  0.876771  , -0.51261532,  0.69193701,
          -0.41820108,  0.84120434,  0.29369576, -0.06614878,

           0.72712383, -1.11525569, -0.13372329,  0.53674014,
          -0.38395277,  0.89723775,  0.20742629, -0.94646943,
           0.67617896,  0.52110043, -1.38125575, -0.51175397,
           1.41848186, -0.05441891, -0.62679592,  1.40399454;
    MatrixN dx(3, 2*8*8);
    dx << 0.        ,  1.29374452,  0.        ,  0.        ,  0.        ,
           0.84842249,  0.        ,  0.        ,
           0.        ,  0.        ,  0.        , -0.31671873,  0.        ,
           0.        ,  0.        , -1.4721032 ,
           0.        ,  0.        ,  0.        , -1.9646576 ,  0.        ,
           0.        ,  0.        ,  0.        ,
           0.        , -0.34921717,  0.        ,  0.        ,  0.68748776,
           0.        ,  0.        ,  1.71009631,
           0.        , -1.06116246,  0.07276335,  0.        ,  0.        ,
           0.        ,  0.        ,  1.21168054,
           0.        ,  0.        ,  0.        ,  0.        ,  1.75090416,
           0.        ,  0.        ,  0.        ,
           0.        ,  0.        ,  0.        ,  1.30593839,  0.        ,
           0.        ,  0.25105781,  0.        ,
          -0.39189565,  0.        ,  0.        ,  0.        ,  0.93956115,
           0.        ,  0.        ,  0.        ,

           0.        , -0.4560326 ,  0.        ,  0.97480044,  0.        ,
          -1.3597251 ,  0.        ,  0.        ,
           0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
           0.        , -0.23181517,  0.        ,
           0.        ,  0.12403004,  0.        ,  0.83317537,  0.        ,
           0.        ,  0.        ,  0.        ,
           0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
          -1.52263223,  0.        ,  0.15419263,
          -1.19366621,  0.        ,  0.        ,  0.        ,  0.        ,
           0.        ,  1.33168829,  0.        ,
           0.        ,  0.        ,  0.        , -0.95997357,  0.        ,
           0.30999145,  0.        ,  0.        ,
           0.        ,  0.        , -0.36261005,  0.        ,  0.        ,
           0.        ,  0.        ,  0.        ,
           0.19031117,  0.        ,  0.        ,  0.        ,  0.46397314,
           0.        ,  0.        , -2.38480408,


           0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
           0.        ,  1.80143258,  0.        ,
          -0.58552865,  0.        , -0.13871152,  0.        ,  0.        ,
          -0.65902429,  0.        ,  0.        ,
           0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
          -1.79380576,  0.        ,  0.        ,
           0.64211802,  0.        ,  0.        , -0.01029485,  0.        ,
           0.        ,  0.75943923,  0.        ,
          -0.41885403,  0.        ,  0.        ,  0.        ,  0.        ,
           0.        ,  0.10832315,  0.        ,
           0.        ,  0.        ,  0.        ,  0.26041765, -0.4883311 ,
           0.        ,  0.        ,  0.        ,
           0.07752951,  0.        ,  0.        ,  0.        ,  0.        ,
           1.15592811,  0.        , -0.85945464,
           0.        ,  0.        ,  1.37929608,  0.        ,  0.        ,
           0.        ,  0.        ,  0.        ,

           0.        ,  0.        , -0.92172661,  0.        ,  0.        ,
           0.        ,  0.        ,  0.        ,
           0.        , -0.51382159,  0.        ,  0.        , -1.42632614,
           0.        ,  0.82134494,  0.        ,
           0.        ,  0.88597893,  0.        , -0.33538864,  0.        ,
           0.        ,  0.        ,  1.0791449 ,
           0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
          -0.08146537,  0.        ,  0.        ,
           0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
           0.        ,  0.        , -0.06467902,
           0.1157789 ,  0.        ,  0.        , -0.06358474,  1.6672031 ,
           0.        ,  0.        ,  0.        ,
           0.        , -1.23959368, -1.18716685,  0.        , -0.67859249,
           0.        ,  0.        ,  0.        ,
           0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
           0.        ,  0.        ,  1.43853299,


           0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
           0.        , -1.41749206,  0.        ,
          -0.83655323,  0.        ,  1.18295151,  0.        ,  0.        ,
          -1.62708353,  0.        ,  0.        ,
           0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
           0.        ,  0.        ,  0.        ,
           0.02751224,  0.        ,  0.52466305,  0.        ,  0.        ,
          -0.43795283,  0.        , -1.44280928,
           0.        , -1.4918993 ,  0.876771  ,  0.        , -0.51261532,
           0.        ,  0.        ,  0.        ,
           0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
           0.        ,  0.69193701,  0.        ,
          -0.41820108,  0.        ,  0.        ,  0.        ,  0.        ,
           0.29369576,  0.        ,  0.        ,
           0.        ,  0.        ,  0.84120434,  0.        ,  0.        ,
           0.        , -0.06614878,  0.        ,

           0.        ,  0.72712383, -1.11525569,  0.        ,  0.        ,
           0.        ,  0.53674014,  0.        ,
           0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
          -0.13372329,  0.        ,  0.        ,
           0.        , -0.38395277,  0.        ,  0.89723775,  0.        ,
           0.20742629,  0.        ,  0.        ,
           0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
           0.        ,  0.        , -0.94646943,
           0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
           0.        ,  0.        , -0.51175397,
           0.67617896,  0.        ,  0.52110043,  0.        , -1.38125575,
           0.        ,  0.        ,  0.        ,
           1.41848186,  0.        ,  0.        , -0.05441891,  0.        ,
           0.        ,  0.        ,  1.40399454,
           0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
          -0.62679592,  0.        ,  0.;
    Pooling pl("{inputShape=[2,8,8];stride=2}");
    t_cppl cache;
    t_cppl grads;
    MatrixN y=pl.forward(x, &cache);
    MatrixN dx0=pl.backward(dchain, &cache, &grads);
    bool allOk=true;
    bool ret=matComp(dx,dx0,"PoolingBackward dx",eps);
    if (!ret) allOk=false;
    cppl_delete(&cache);
    cppl_delete(&grads);
    return allOk;
}



bool checkAffineRelu(float eps=CP_DEFAULT_NUM_EPS) {
    bool allOk=true;
    MatrixN x(2,4);
    x << -2.44826954,  0.81707546,  1.31506197, -0.0965869,
         -1.58810595,  0.61785734, -0.44616526, -0.82397868;
    MatrixN W(4,5);
    W << 0.86699529, -1.01282323, -0.38693827, -0.74054919, -1.1270489,
        -2.27456327,  0.190157  , -1.26097006, -0.33208802,  0.16781256,
         0.08560445, -0.24551482,  0.30694568, -1.61658197, -3.02608437,
         0.18890925,  1.7598865 , -0.14769698, -0.59141176, -0.85895842;
    MatrixN b(1,5);
    b << 1.81489966,  1.27103839,  1.58359929, -0.8527733 ,  1.24037006;
    MatrixN y(2,5);
    y << 0.        ,  3.41322609,  1.91853897,  0.        ,  0.24028072,
         0.        ,  1.65643012,  1.40374932,  1.32668765,  5.19182449;

    AffineRelu arl("{inputShape=[4];hidden=5}");
    t_cppl cache;
    t_cppl grads;
    *(arl.params["af-W"])=W;
    *(arl.params["af-b"])=b;
    MatrixN y0=arl.forward(x, &cache);
    bool ret=matComp(y,y0,"AffineRelu",eps);
    if (!ret) allOk=false;

    MatrixN dx(2,4);
    dx << 2.29906266, -1.48504925,  6.47154972,  1.00439731,
          1.8610674 , -0.74000018, -0.6322688 , -4.68601953;
    MatrixN dW(4,5);
    dW << 0.        ,  4.7081366 , -2.63137168,  0.27607488,  4.10764656,
          0.        , -1.78497082,  0.90776884, -0.10740775, -1.32401681,
          0.        ,  0.6314218 ,  0.97587313,  0.07756096, -2.89927552,
          0.        ,  2.03769315, -0.36020745,  0.1432397 , -0.24398387;
    MatrixN db(1,5);
    db << 0.        , -2.77768192,  1.19310997, -0.17383908, -1.49039921;
    MatrixN dchain(2,5);
    dchain << -1.08201385, -0.34514762,  0.8563332 ,  0.7021515 , -2.02372516,
              -0.26158065, -2.43253431,  0.33677677, -0.17383908,  0.53332595;

    MatrixN dx0=arl.backward(dchain, &cache, &grads);

    ret=matComp(dx,dx0,"AffineRelu dx",eps);
    if (!ret) allOk=false;
    ret=matComp(dW,*(grads["af-W"]),"AffineRelu dW",eps);
    if (!ret) allOk=false;
    ret=matComp(db,*(grads["af-b"]),"AffineRelu db",eps);
    if (!ret) allOk=false;

    cppl_delete(&cache);
    cppl_delete(&grads);

    return allOk;
}

bool checkSoftmax(float eps=CP_DEFAULT_NUM_EPS) {
    bool allOk=true;
    MatrixN x(10,5);
    x << -5.53887846e-04,  -1.66357895e-05,   9.78587865e-04, -1.32038284e-03,   4.77159634e-04,
          9.20053947e-04,  -7.19330590e-05,  -5.98042560e-04, -2.20287950e-03,  -1.90102146e-03,
         -2.50299417e-04,   4.90923653e-04,  -1.20710791e-04, -1.59583803e-03,   7.76216493e-04,
          5.69312741e-04,   1.04067712e-03,   7.80831584e-04, 1.59436445e-04,  -4.02010213e-04,
         -1.92711171e-04,   4.38969012e-04,   3.51890037e-04, 8.72617659e-04,  -2.67204717e-04,
         -1.93907739e-04,   5.80622659e-05,  -1.35256160e-03, 6.45579573e-04,   3.07149694e-04,
          7.88018217e-05,  -5.08851258e-04,  -5.68082221e-04, -9.08716816e-04,  -4.28502983e-04,
         -7.81674859e-05,   2.58156281e-04,   9.68529476e-04, 7.02486610e-04,   1.02575914e-03,
          7.97130342e-04,  -7.56924427e-04,  -5.05724689e-05, -4.83491308e-04,   5.32065794e-04,
         -4.82766795e-04,   5.50968630e-05,   5.90486482e-04, 4.08029314e-04,   2.16114208e-04;
    MatrixN y(10,1);
    y << 2, 2, 1, 4, 2, 3, 2, 3, 4, 1;
    MatrixN probs(10,5);
    probs << 0.19990659,  0.20001402,  0.20021317,  0.19975342,  0.20011281,
             0.20033832,  0.20013968,  0.20003441,  0.19971365,  0.19977394,
             0.19997786,  0.20012615,  0.20000378,  0.19970897,  0.20018325,
             0.20002791,  0.20012222,  0.20007022,  0.19994594,  0.19983371,
             0.19991332,  0.20003964,  0.20002222,  0.2001264 ,  0.19989842,
             0.1999826 ,  0.200033  ,  0.19975102,  0.20015055,  0.20008283,
             0.20010919,  0.19999163,  0.19997979,  0.19991168,  0.2000077 ,
             0.19986932,  0.19993655,  0.20007863,  0.20002541,  0.20009008,
             0.20015793,  0.19984711,  0.19998832,  0.19990176,  0.20010488,
             0.199872  ,  0.19997953,  0.20008662,  0.20005012,  0.20001173;
    floatN loss=1.60920315915;
    MatrixN dx(10,5);
    dx << 0.01999066,  0.0200014 , -0.07997868,  0.01997534,  0.02001128,
          0.02003383,  0.02001397, -0.07999656,  0.01997136,  0.01997739,
          0.01999779, -0.07998739,  0.02000038,  0.0199709 ,  0.02001832,
          0.02000279,  0.02001222,  0.02000702,  0.01999459, -0.08001663,
          0.01999133,  0.02000396, -0.07999778,  0.02001264,  0.01998984,
          0.01999826,  0.0200033 ,  0.0199751 , -0.07998494,  0.02000828,
          0.02001092,  0.01999916, -0.08000202,  0.01999117,  0.02000077,
          0.01998693,  0.01999366,  0.02000786, -0.07999746,  0.02000901,
          0.02001579,  0.01998471,  0.01999883,  0.01999018, -0.07998951,
          0.0199872 , -0.08000205,  0.02000866,  0.02000501,  0.02000117;

    Softmax sm("{inputShape=[5]}");
    t_cppl cache;
    t_cppl grads;
    MatrixN probs0=sm.forward(x, y, &cache);
    bool ret=matComp(probs,probs0,"Softmax probabilities",eps);
    if (!ret) allOk=false;
    floatN loss0=sm.loss(y, &cache);
    floatN d=loss-loss0;
    floatN err=std::abs(d);
    if (err > eps) {
        cout << "Loss error: correct:" << loss << " got: " << loss0 << ", err=" << err << endl;
        allOk=false;
    } else {
        cout << "Loss ok, loss=" << loss0 << " (ref: " << loss << "), err=" << err << endl;
    }
    //MatrixN dchain=x;
    //dchain.setOnes();
    MatrixN dx0=sm.backward(y, &cache, &grads);
    ret=matComp(dx,dx0,"Softmax dx",eps);
    if (!ret) allOk=false;
    cppl_delete(&grads);
    cppl_delete(&cache);
    return allOk;
}


bool checkSvm(float eps=CP_DEFAULT_NUM_EPS) {
    bool allOk=true;
    MatrixN x(10,5);
    x << 2.48040968e-04,   5.60446668e-04,  -3.52994957e-04,
         1.01572982e-03,   4.14494264e-04,
        -6.31693635e-04,  -8.15563788e-04,  -1.20636602e-03,
         -2.10174557e-03,   5.53294928e-04,
          1.14679595e-03,   1.24827753e-03,  -6.61989763e-04,
          9.55559461e-04,  -4.28180029e-04,
          4.46347111e-04,   6.23103141e-04,  -8.31752231e-04,
         -8.16901550e-04,  -3.51481858e-04,
          5.99420847e-04,   7.99136992e-04,   7.48694922e-04,
         -1.31792142e-03,  -1.41278790e-03,
          7.83720049e-04,  -1.87400705e-03,   6.83413931e-04,
         -3.33278182e-05,  -8.23791353e-04,
          4.48433013e-04,  -1.90826829e-04,  -1.18725164e-03,
          8.57369270e-04,  -2.03127259e-04,
         -8.12742999e-04,  -8.77664600e-04,   9.59702869e-04,
         -4.21470554e-05,  -1.26450252e-04,
          7.75822790e-04,  -9.17338786e-04,   6.60689034e-04,
          2.50740181e-04,   1.58892909e-03,
         -1.07719599e-03,  -1.12323192e-04,   7.62566128e-06,
         -2.26193130e-04,   9.21699517e-04;
    MatrixN y(10,1);
    y << 2, 3, 0, 2, 4, 3, 1, 0, 1, 4;
    MatrixN margins(10,5);
    margins << 1.00060104,  1.00091344,  0.        ,  1.00136872,  1.00076749,
               1.00147005,  1.00128618,  1.00089538,  0.        ,  1.00265504,
               0.        ,  1.00010148,  0.99819121,  0.99980876,  0.99842502,
               1.0012781 ,  1.00145486,  0.        ,  1.00001485,  1.00048027,
               1.00201221,  1.00221192,  1.00216148,  1.00009487,  0.        ,
               1.00081705,  0.99815932,  1.00071674,  0.        ,  0.99920954,
               1.00063926,  0.        ,  0.99900358,  1.0010482 ,  0.9999877 ,
               0.        ,  0.99993508,  1.00177245,  1.0007706 ,  1.00068629,
               1.00169316,  0.        ,  1.00157803,  1.00116808,  1.00250627,
               0.9980011 ,  0.99896598,  0.99908593,  0.99885211,  0.;
    floatN loss=4.00207888295;
    MatrixN dx(10,5);
    dx << 0.1,  0.1, -0.4,  0.1,  0.1,
          0.1,  0.1,  0.1, -0.4,  0.1,
         -0.4,  0.1,  0.1,  0.1,  0.1,
          0.1,  0.1, -0.4,  0.1,  0.1,
          0.1,  0.1,  0.1,  0.1, -0.4,
          0.1,  0.1,  0.1, -0.4,  0.1,
          0.1, -0.4,  0.1,  0.1,  0.1,
         -0.4,  0.1,  0.1,  0.1,  0.1,
          0.1, -0.4,  0.1,  0.1,  0.1,
          0.1,  0.1,  0.1,  0.1, -0.4;

    Svm sv("{inputShape=[5]}");
    t_cppl cache;
    t_cppl grads;
    MatrixN margins0=sv.forward(x, y, &cache);
    bool ret=matComp(margins,margins0,"Svm probabilities",eps);
    if (!ret) allOk=false;
    floatN loss0=sv.loss(y, &cache);
    floatN d=loss-loss0;
    floatN err=std::abs(d);
    if (err > eps) {
        cout << "Loss error: correct:" << loss << " got: " << loss0 << ", err=" << err << endl;
        allOk=false;
    } else {
        cout << "Loss ok, loss=" << loss0 << " (ref: " << loss << "), err=" << err << endl;
    }
    MatrixN dx0=sv.backward(y, &cache, &grads);
    ret=matComp(dx,dx0,"Softmax dx",eps);
    if (!ret) allOk=false;
    cppl_delete(&grads);
    cppl_delete(&cache);
    return allOk;
}

bool checkTwoLayer(float eps=CP_DEFAULT_NUM_EPS) {
    bool allOk=true;   // N=3, D=5, H=4, C=2
    int N=3, D=5, H=4, C=2;
    MatrixN x(N,D);
    x << -5.5       , -3.35714286, -1.21428571,  0.92857143,  3.07142857,
         -4.78571429, -2.64285714, -0.5       ,  1.64285714,  3.78571429,
         -4.07142857, -1.92857143,  0.21428571,  2.35714286,  4.5;
    MatrixN yc(N,1);
    yc << 0, 1, 1;
    MatrixN W1(D,H);
    W1 << -0.7       , -0.64736842, -0.59473684, -0.54210526,
          -0.48947368, -0.43684211, -0.38421053, -0.33157895,
          -0.27894737, -0.22631579, -0.17368421, -0.12105263,
          -0.06842105, -0.01578947,  0.03684211,  0.08947368,
           0.14210526,  0.19473684,  0.24736842,  0.3;
    MatrixN b1(1,H);
    b1 << -0.1       ,  0.23333333,  0.56666667,  0.9;
    MatrixN W2(H,C);
    W2 << -0.3, -0.2,
          -0.1,  0.,
           0.1,  0.2,
           0.3,  0.4;
    MatrixN b2(1,C);
    b2 << -0.9,  0.1;

    MatrixN sc(N,C); // Scores
    sc << -0.88621554,  2.56401003,
         -0.69824561,  2.46626566,
         -0.51027569,  2.3685213;

    CpParams cp;
    cp.setPar("inputShape",vector<int>{D});
    cp.setPar("hidden",vector<int>{H,C});
    TwoLayerNet tln(cp);

    *(tln.params["af1-W"])=W1;
    *(tln.params["af1-b"])=b1;
    *(tln.params["af2-W"])=W2;
    *(tln.params["af2-b"])=b2;

    t_cppl cache;
    t_cppl grads;
    MatrixN sc0=tln.forward(x,yc,&cache);
    bool ret=matComp(sc,sc0,"TwoLayerNetScores",eps);
    if (!ret) allOk=false;

    MatrixN dW1(D,H);
    dW1 << -0.16400759, -0.16400759, -0.16400759, -0.16400759,
           -0.10147167, -0.10147167, -0.10147167, -0.10147167,
           -0.03893575, -0.03893575, -0.03893575, -0.03893575,
            0.02360017,  0.02360017,  0.02360017,  0.02360017,
            0.08613609,  0.08613609,  0.08613609,  0.08613609;
    MatrixN db1(1,H);
    db1 << 0.02918343,  0.02918343,  0.02918343,  0.02918343;
    MatrixN dW2(H,C);
    dW2 << -1.83041352,  1.83041352,
           -1.82522911,  1.82522911,
           -1.8200447 ,  1.8200447 ,
           -1.81486029,  1.81486029;
    MatrixN db2(1,C);
    db2 << -0.29183429,  0.29183429;

    // XXX reg parameter
    floatN reg=0.0;
    floatN ls = tln.loss(yc,&cache);
    floatN lsc = 1.1925059294331903;
    floatN lse=std::abs(ls-lsc);
    if (lse < eps) {
        cout << "TwoLayerNet: loss-err: " << lse << " for reg=" << reg << " OK." << endl;
    } else {
        cout << "TwoLayerNet: loss-err: " << lse << " for reg=" << reg << " incorrect: " << ls << ", expected: " << lsc << endl;
        allOk=false;
    }
    MatrixN dx0=tln.backward(yc,&cache,&grads);

    cout << "Got grads: ";
    for (auto gi : grads) {
        cout << gi.first << " ";
    }
    cout << endl;
    ret=matComp(dW1,*(grads["af1-W"]),"TwoLayerNet dW1",eps);
    if (!ret) allOk=false;
    ret=matComp(db1,*(grads["af1-b"]),"TwoLayerNet db1",eps);
    if (!ret) allOk=false;
    ret=matComp(dW2,*(grads["af2-W"]),"TwoLayerNet dW2",eps);
    if (!ret) allOk=false;
    ret=matComp(db2,*(grads["af2-b"]),"TwoLayerNet db2",eps);
    if (!ret) allOk=false;

    cppl_delete(&cache);
    cppl_delete(&grads);
    return allOk;
}

bool registerTest() {
    bool allOk=true;
    cout << "Registered Layers:" << endl;
    int nr=1;
    for (auto it : _syncogniteLayerFactory.mapl) {
        cout << nr << ".: " << it.first << " ";
        t_layer_props_entry te=_syncogniteLayerFactory.mapprops[it.first];
        CpParams cp;
        cp.setPar("inputShape",std::vector<int>(te));
        Layer *l = CREATE_LAYER(it.first, cp)
        if (l->layerType == LT_NORMAL) {
            cout << "normal layer" << endl;
        } else if (l->layerType==LT_LOSS) {
            cout << "loss-layer (final)" << endl;
        } else {
            cout << "unspecified layer -- ERROR!" << endl;
            allOk=false;
        }
        delete l;
        ++nr;
    }
    return allOk;
}

int tFunc(floatN x, int c) {
    int y=(int)(((sin(x)+1.0)/2.0)*(floatN)c);
    //cout << x << ":" << y << " " << endl;
    return y;
}

bool trainTest() {
    bool allOk=true;
    CpParams cp;
    int N=300,NV=30,NT=30,I=5,H=20,C=4;
    cp.setPar("inputShape",vector<int>{I});
    cp.setPar("hidden",vector<int>{H,C});
    TwoLayerNet tln(cp);

    MatrixN X(N,I);
    X.setRandom();
    MatrixN y(N,1);
    for (unsigned i=0; i<y.rows(); i++) y(i,0)=tFunc(X(i,0),C);

    MatrixN Xv(NV,I);
    Xv.setRandom();
    MatrixN yv(NV,1);
    for (unsigned i=0; i<yv.rows(); i++) yv(i,0)=tFunc(Xv(i,0),C);

    MatrixN Xt(NT,I);
    Xt.setRandom();
    MatrixN yt(NT,1);
    for (unsigned i=0; i<yt.rows(); i++) yt(i,0)=tFunc(Xt(i,0),C);

    CpParams cpo("{verbose=false;epochs=200.0;batch_size=20;learning_rate=1e-2;"\
                "lr_decay=1.0;momentum=0.9;decay_rate=0.98;epsilon=1e-8;threads=2}");

    floatN train_err,test_err,val_err;

    tln.train(X, y, Xv, yv, "Adam", cpo);
    //tln.train(X, y, Xv, yv, "Sdg", cpo);
    train_err=tln.test(X, y);
    val_err=tln.test(Xv, yv);
    test_err=tln.test(Xt, yt);

    cout << "Train-test, train-err=" << train_err << endl;
    cout << "       validation-err=" << val_err << endl;
    cout << "       final test-err=" << val_err << endl;
    if (test_err>0.2 || test_err>0.2 || train_err>0.2) allOk=false;
    return allOk;
}

int doTests() {
    MatrixN yz=MatrixN(0,0);
    cout << "=== 0.: Init: registering layers" << endl;
    registerLayers();
    cout << "=== 1.: Numerical gradient tests" << endl;
    bool allOk=true;
    Color::Modifier red(Color::FG_RED);
    Color::Modifier green(Color::FG_GREEN);
    Color::Modifier def(Color::FG_DEFAULT);

    Affine pc(CpParams("{inputShape=[30];hidden=20}"));
    MatrixN x(10,30);
    x.setRandom();
    if (!pc.selfTest(x,yz)) {
        allOk=false;
    }

    Relu rl(CpParams("{inputShape=[20]}"));
    MatrixN xr(10,20);
    xr.setRandom();
    if (!rl.selfTest(xr,yz)) {
        allOk=false;
    }

    // Batchnorm - still some strangities:
    BatchNorm bn("{inputShape=[10];train=true;noVectorizationTests=true}");
    MatrixN xbr(20,10);
    xbr.setRandom();
    if (!bn.selfTest(xbr,yz, 1e-4, 1e-3)) {
        allOk=false;
    }

    // Dropout
    Dropout dp("{inputShape=[5];train=true;noVectorizationTests=true;freeze=true;drop=0.8}");
    MatrixN xdp(3,5);
    xdp.setRandom();
    floatN h=1e-6; if (h<CP_DEFAULT_NUM_H) h=CP_DEFAULT_NUM_H;
    floatN eps=1e-8; if (eps<CP_DEFAULT_NUM_EPS) eps=CP_DEFAULT_NUM_EPS;
    if (!dp.selfTest(xdp,yz, h, eps)) {
        allOk=false;
    }

    // Convolution
    //Convolution cv("{inputShape=[3,4,4,16,3,3];stride=1;pad=0}");
    //MatrixN xcv(20,48);
    Convolution cv("{inputShape=[3,5,5];kernel=[2,3,3];stride=1;pad=1}");
    MatrixN xcv(2,75);
    xcv.setRandom();
    if (!cv.selfTest(xcv, yz, 1e-2, 1e-3)) {
        allOk=false;
    }

    // Pooling
    Pooling pl("{inputShape=[3,4,4];stride=2}");
    MatrixN xpl(20,48);
    xpl.setRandom();
    if (!pl.selfTest(xpl, yz)) {
        allOk=false;
    }

    // SpatialBatchNorm
    SpatialBatchNorm sbn("{inputShape=[3,4,4];train=true;batch_size=20;noVectorizationTests=true}");
    MatrixN xsbn(20,3*4*4);
    xsbn.setRandom();
    if (!sbn.selfTest(xsbn, yz)) {
        allOk=false;
    }

    AffineRelu rx("{inputShape=[2];hidden=3}");
    MatrixN xarl(30,2);
    xarl.setRandom();
    h=1e-6; if (h<CP_DEFAULT_NUM_H) h=CP_DEFAULT_NUM_H;
    eps=1e-6; if (eps<CP_DEFAULT_NUM_EPS) eps=CP_DEFAULT_NUM_EPS;
    if (!rx.selfTest(xarl,yz, h, eps)) {
        allOk=false;
    }

    // TwoLayerNet
    int ntl1=4, ntl2=5, ntl3=6, ntlN=30;
    CpParams tcp;
    tcp.setPar("inputShape",vector<int>{ntl1});
    tcp.setPar("hidden",vector<int>{ntl2,ntl3});
    TwoLayerNet tl(tcp);
    MatrixN xtl(ntlN,ntl1);
    xtl.setRandom();
    MatrixN y2(ntlN,1);
    for (unsigned i=0; i<y2.rows(); i++) y2(i,0)=(rand()%ntl3);
    h=1e-3; if (h<CP_DEFAULT_NUM_H) h=CP_DEFAULT_NUM_H;
    eps=1e-5; if (eps<CP_DEFAULT_NUM_EPS) eps=CP_DEFAULT_NUM_EPS;
    if (!tl.selfTest(xtl,y2, h, eps)) {
        allOk=false;
        cout << red << "Numerical gradient for TwoLayerNet: ERROR." << def << endl;
    }

    // Softmax
    int smN=10, smC=4;
    CpParams c1;
    c1.setPar("inputShape",vector<int>{smC});
    Softmax mx(c1);
    MatrixN xmx(smN,smC);
    xmx.setRandom();
    MatrixN y(smN,1);
    for (unsigned i=0; i<y.rows(); i++) y(i,0)=(rand()%smC);
    h=1e-3; if (h<CP_DEFAULT_NUM_H) h=CP_DEFAULT_NUM_H;
    eps=1e-6; if (eps<CP_DEFAULT_NUM_EPS) eps=CP_DEFAULT_NUM_EPS;
    if (!mx.selfTest(xmx, y, h, eps)) {
        allOk=false;
    }

    // SVM
    int svN=10, svC=5;
    CpParams c2;
    c2.setPar("inputShape",vector<int>{svC});
    Svm sv(c2);
    MatrixN xsv(svN,svC);
    xsv.setRandom();
    MatrixN yv(svN,1);
    for (unsigned i=0; i<yv.rows(); i++) yv(i,0)=(rand()%svC);
    h=1e-3; if (h<CP_DEFAULT_NUM_H) h=CP_DEFAULT_NUM_H;
    eps=1e-6; if (eps<CP_DEFAULT_NUM_EPS) eps=CP_DEFAULT_NUM_EPS;
    if (!sv.selfTest(xsv, yv, h, eps)) {
        allOk=false;
    }

    //LayerBlock1
    LayerBlock lb("{name='testblock'}");
    cout << "LayerName for lb: " << lb.layerName << endl;
    lb.addLayer("Affine","af1","{inputShape=[10]}",{"input"});
    lb.addLayer("Relu","rl1","",{"af1"});
    lb.addLayer("Affine","af2","{hidden=10}",{"rl1"});
    lb.addLayer("Softmax","sm1","",{"af2"});
    if (!lb.checkTopology()) {
        allOk=false;
        cout << red << "Topology-check for LayerBlock: ERROR." << def << endl;
    } else {
        cout << green << "Topology-check for LayerBlock: ok." << def << endl;
    }
    MatrixN xml(30,10);
    xml.setRandom();
    MatrixN yml(30,1);
    for (unsigned i=0; i<yml.rows(); i++) yml(i,0)=(rand()%10);

    h=1e-3; if (h<CP_DEFAULT_NUM_H) h=CP_DEFAULT_NUM_H;
    eps=1e-5; if (eps<CP_DEFAULT_NUM_EPS) eps=CP_DEFAULT_NUM_EPS;
    if (!lb.selfTest(xml,yml, h, eps)) {
        allOk=false;
        cout << red << "Numerical gradient for LayerBlock: ERROR." << def << endl;
    }

    cout << "=== 2.: Test-data tests" << endl;

    if (checkAffineForward()) {
        cout << green << "AffineForward (Affine) with test data: OK." << def << endl;
    } else {
        cout << red << "AffineForward (Affine) with test data: ERROR." << def << endl;
        allOk=false;
    }

    if (checkAffineBackward()) {
        cout << green << "AffineBackward (Affine) with test data: OK." << def << endl;
    } else {
        cout << red << "AffineBackward (Affine) with test data: ERROR." << def << endl;
        allOk=false;
    }

    if (checkReluForward()) {
        cout << green << "ReluForward with test data: OK." << def << endl;
    } else {
        cout << red << "ReluForward with test data: ERROR." << def << endl;
        allOk=false;
    }

    if (checkReluBackward()) {
        cout << green << "ReluBackward (Affine) with test data: OK." << def << endl;
    } else {
        cout << red << "ReluBackward (Affine) with test data: ERROR." << def << endl;
        allOk=false;
    }

    if (checkBatchNormForward()) {
        cout << green << "BatchNormForward with test data: OK." << def << endl;
    } else {
        cout << red << "BatchNormForward with test data: ERROR." << def << endl;
        allOk=false;
    }

    if (checkBatchNormBackward()) {
        cout << green << "BatchNormBackward with test data: OK." << def << endl;
    } else {
        cout << red << "BatchNormBackward with test data: ERROR." << def << endl;
        allOk=false;
    }

    if (checkDropout()) {
        cout << green << "Dropout with test data: OK." << def << endl;
    } else {
        cout << red << "Dropout with test data: ERROR." << def << endl;
        allOk=false;
    }

    if (checkConvolutionForward()) {
        cout << green << "ConvolutionForward (Convolution) with test data: OK." << def << endl;
    } else {
        cout << red << "ConvolutionForward (Convolution) with test data: ERROR." << def << endl;
        allOk=false;
        exit(-1);
    }
    if (checkConvolutionBackward()) {
        cout << green << "ConvolutionBackward (Convolution) with test data: OK." << def << endl;
    } else {
        cout << red << "ConvolutionBackward (Convolution) with test data: ERROR." << def << endl;
        allOk=false;
    }

    if (checkPoolingForward()) {
        cout << green << "PoolingForward with test data: OK." << def << endl;
    } else {
        cout << red << "PoolingForward with test data: ERROR." << def << endl;
        allOk=false;
        exit(-1);
    }
    if (checkPoolingBackward()) {
        cout << green << "PoolingBackward with test data: OK." << def << endl;
    } else {
        cout << red << "PoolingBackward with test data: ERROR." << def << endl;
        allOk=false;
    }

    if (checkAffineRelu()) {
        cout << green << "AffineRelu with test data: OK." << def << endl;
    } else {
        cout << red << "AffineRelu with test data: ERROR." << def << endl;
        allOk=false;
    }

    if (checkSoftmax()) {
        cout << green << "Softmax with test data: OK." << def << endl;
    } else {
        cout << red << "Softmax with test data: ERROR." << def << endl;
        allOk=false;
    }
    if (checkSvm()) {
        cout << green << "Svm with test data: OK." << def << endl;
    } else {
        cout << red << "Svm with test data: ERROR." << def << endl;
        allOk=false;
    }

    if (checkTwoLayer()) {
        cout << green << "TwoLayerNet with test data: OK." << def << endl;
    } else {
        cout << red << "TwoLayerNet with test data: ERROR." << def << endl;
        allOk=false;
    }

    if (trainTest()) {
        cout << green << "TrainTest: OK." << def << endl;
    } else {
        cout << red << "TrainTest: ERROR." << def << endl;
        allOk=false;
    }


    if (registerTest()) {
        cout << green << "RegisterTest: OK." << def << endl;
    } else {
        cout << red << "RegisterTest: ERROR." << def << endl;
        allOk=false;
    }

    if (allOk) {
        cout << green << "All tests ok." << def << endl;
    } else {
        cout << red << "Tests failed." << def << endl;
    }

    return 0;
}

int main(int argc, char *argv[]) {
    string name="test";
    cpInitCompute(name);
    int ret=0;
    ret=doTests();
    cpExitCompute();
    return ret;
}
