#ifndef _CPLT_LSTM_H
#define _CPLT_LSTM_H

#include "../testneural.h"

bool checkLSTMStepForward(floatN eps=CP_DEFAULT_NUM_EPS) {
    MatrixN x(3,4);    // N, D  // N, D, H = 3, 4, 5
    x << -0.4       , -0.25454545, -0.10909091,  0.03636364,
         0.18181818,  0.32727273,  0.47272727,  0.61818182,
         0.76363636,  0.90909091,  1.05454545,  1.2;
    MatrixN Wxh(4,4*5); // D, 4*H
    MatrixN Whh(5,4*5); // H, 4*H
    Wxh << -2.1       , -2.05696203, -2.01392405, -1.97088608, -1.9278481 ,
        -1.88481013, -1.84177215, -1.79873418, -1.7556962 , -1.71265823,
        -1.66962025, -1.62658228, -1.5835443 , -1.54050633, -1.49746835,
        -1.45443038, -1.41139241, -1.36835443, -1.32531646, -1.28227848,
        -1.23924051, -1.19620253, -1.15316456, -1.11012658, -1.06708861,
        -1.02405063, -0.98101266, -0.93797468, -0.89493671, -0.85189873,
        -0.80886076, -0.76582278, -0.72278481, -0.67974684, -0.63670886,
        -0.59367089, -0.55063291, -0.50759494, -0.46455696, -0.42151899,
        -0.37848101, -0.33544304, -0.29240506, -0.24936709, -0.20632911,
        -0.16329114, -0.12025316, -0.07721519, -0.03417722,  0.00886076,
         0.05189873,  0.09493671,  0.13797468,  0.18101266,  0.22405063,
         0.26708861,  0.31012658,  0.35316456,  0.39620253,  0.43924051,
         0.48227848,  0.52531646,  0.56835443,  0.61139241,  0.65443038,
         0.69746835,  0.74050633,  0.7835443 ,  0.82658228,  0.86962025,
         0.91265823,  0.9556962 ,  0.99873418,  1.04177215,  1.08481013,
         1.1278481 ,  1.17088608,  1.21392405,  1.25696203,  1.3;
    Whh << -0.7       , -0.67070707, -0.64141414, -0.61212121, -0.58282828,
        -0.55353535, -0.52424242, -0.49494949, -0.46565657, -0.43636364,
        -0.40707071, -0.37777778, -0.34848485, -0.31919192, -0.28989899,
        -0.26060606, -0.23131313, -0.2020202 , -0.17272727, -0.14343434,
        -0.11414141, -0.08484848, -0.05555556, -0.02626263,  0.0030303 ,
         0.03232323,  0.06161616,  0.09090909,  0.12020202,  0.14949495,
         0.17878788,  0.20808081,  0.23737374,  0.26666667,  0.2959596 ,
         0.32525253,  0.35454545,  0.38383838,  0.41313131,  0.44242424,
         0.47171717,  0.5010101 ,  0.53030303,  0.55959596,  0.58888889,
         0.61818182,  0.64747475,  0.67676768,  0.70606061,  0.73535354,
         0.76464646,  0.79393939,  0.82323232,  0.85252525,  0.88181818,
         0.91111111,  0.94040404,  0.96969697,  0.9989899 ,  1.02828283,
         1.05757576,  1.08686869,  1.11616162,  1.14545455,  1.17474747,
         1.2040404 ,  1.23333333,  1.26262626,  1.29191919,  1.32121212,
         1.35050505,  1.37979798,  1.40909091,  1.43838384,  1.46767677,
         1.4969697 ,  1.52626263,  1.55555556,  1.58484848,  1.61414141,
         1.64343434,  1.67272727,  1.7020202 ,  1.73131313,  1.76060606,
         1.78989899,  1.81919192,  1.84848485,  1.87777778,  1.90707071,
         1.93636364,  1.96565657,  1.99494949,  2.02424242,  2.05353535,
         2.08282828,  2.11212121,  2.14141414,  2.17070707,  2.2;
    MatrixN bh(1,4*5); // 4*H
    bh << 0.3       ,  0.32105263,  0.34210526,  0.36315789,  0.38421053,
        0.40526316,  0.42631579,  0.44736842,  0.46842105,  0.48947368,
        0.51052632,  0.53157895,  0.55263158,  0.57368421,  0.59473684,
        0.61578947,  0.63684211,  0.65789474,  0.67894737,  0.7;
    MatrixN h(3,5);  // N, H (prev_h)
    h << -0.3       , -0.22857143, -0.15714286, -0.08571429, -0.01428571,
         0.05714286,  0.12857143,  0.2       ,  0.27142857,  0.34285714,
         0.41428571,  0.48571429,  0.55714286,  0.62857143,  0.7;
    MatrixN hn(3,5); // N, H (next_h)
    hn << 0.24635157,  0.28610883,  0.32240467,  0.35525807,  0.38474904,
         0.49223563,  0.55611431,  0.61507696,  0.66844003,  0.7159181 ,
         0.56735664,  0.66310127,  0.74419266,  0.80889665,  0.858299;
    MatrixN c(3,5);  // N, H (prev_c)
    c << -0.4       , -0.30714286, -0.21428571, -0.12142857, -0.02857143,
         0.06428571,  0.15714286,  0.25      ,  0.34285714,  0.43571429,
         0.52857143,  0.62142857,  0.71428571,  0.80714286,  0.9;
    MatrixN cn(3,5); // N, H (next_c)
    cn << 0.32986176,  0.39145139,  0.451556  ,  0.51014116,  0.56717407,
         0.66382255,  0.76674007,  0.87195994,  0.97902709,  1.08751345,
         0.74192008,  0.90592151,  1.07717006,  1.25120233,  1.42395676;

    LSTM lstm("{name='testlstm';inputShape=[4,1];H=5;N=3}");
    *(lstm.params["Wxh"])= Wxh;
    *(lstm.params["Whh"])= Whh;
    *(lstm.params["bh"])=bh;
    t_cppl cache;
    t_cppl states;
    cppl_set(&states,"testlstm-h",new MatrixN(h));
    cppl_set(&states,"testlstm-c",new MatrixN(c));
    t_cppl cp=lstm.forward_step(x, &cache, &states, 0);
    cppl_delete(&cache);
    cppl_delete(&states);
    bool allOk=true;
    if (!matComp(hn,*(cp["testlstm-h0"]),"LSTMForwardStep",eps)) {
        allOk = false;
    }
    if (!matComp(cn,*(cp["testlstm-c0"]),"LSTMForwardStep",eps)) {
        allOk = false;
    }
    cppl_delete(&cp);
    return allOk;
}

bool checkLSTMStepBackward(float eps=CP_DEFAULT_NUM_EPS) {
    MatrixN x(4,5);     // N, D, H = 4, 5, 6
    x << -0.21286845, -0.05735457,  0.48796047,  1.56879759,  0.74922369,
        -0.91729874,  1.2949408 ,  0.30581827, -1.06626142, -0.62425714,
         1.3310974 ,  1.49109516, -0.76034777,  0.81794231,  0.0370213 ,
         0.322284  ,  0.72646747,  0.59337862, -0.28343284,  0.75776449;
    MatrixN Wxh(5,6);
    Wxh << -1.48882307, -1.31838349,  0.29240856,  1.5984637 , -0.41510186,
        -1.71671711, -0.1801214 ,  0.25654143,  0.56909888, -0.41358719,
        -0.31663403, -1.10831106,  0.27130638, -1.4604725 , -1.01923905,
        -0.86789775,  2.00759861,  0.21243604,  0.35736091, -1.68899623,
        -1.24708706, -1.59910152,  0.89471122,  0.556572  ,
        -0.62651971, -1.09432657,  0.21385725,  2.11068451, -0.82615544,
         0.54789161, -0.44372934, -0.26435417,  1.04280569, -0.59116125,
         0.20600722,  0.88506533,  0.03683238, -1.44400721,  0.44514779,
        -1.3441491 , -0.41771521,  0.40533048,  2.2541125 , -0.39513304,
        -0.34165624, -1.31246089, -1.43351731,  0.15940671,
        -0.46960799,  0.57357974, -0.47620957, -0.22509781,  0.26151869,
         0.46622393, -1.49101559,  0.43619729, -0.73960746,  0.36879583,
        -0.58142833,  0.04338621, -0.61467562, -0.027705  , -0.27708452,
         0.88132694, -1.13704558, -0.04312846, -0.36012201,  0.26952201,
        -2.49435648,  0.78588305,  0.89007653,  2.10770974,
         0.00297696, -0.87981706, -0.59067121, -0.01643793,  0.76689783,
         1.44141915, -0.27144963,  0.14718737,  0.4373639 ,  0.15431215,
         0.02893737,  2.24562707,  0.0747226 ,  1.55374633, -0.74031772,
         0.51950952,  1.56947965,  0.80393492,  0.02801457, -2.07851015,
        -0.52975108, -0.00744994,  1.24669828, -0.44225101,
         0.42142366, -0.27970657,  0.18356179,  0.13461398,  0.66065239,
        -0.25786681, -0.6989239 , -2.31172447,  0.98125238,  0.12327205,
         0.63023023,  0.01281663,  0.48128139,  0.41041066, -1.25534191,
         2.11847347, -0.85888934, -1.57131664, -0.48578273,  0.66289712,
         1.58580844, -0.66301695, -1.24766604, -0.19725642;
    MatrixN Whh(6,6);
    Whh << -0.11184118,  0.28467745, -2.08985422,  0.53816606,  0.7612456 ,
        -0.83805405, -1.21216907, -0.65090439,  2.19269347,  0.01593174,
         0.0727994 ,  1.45619685, -1.10564151, -0.03384617,  0.36535036,
         0.10943653, -0.12980007, -0.20856899,  0.75449219,  0.13597489,
        -0.1022836 , -0.11730579,  0.89675217, -0.17588772,
        -0.50205257, -0.26932075,  0.67183483, -1.27212754, -0.71899695,
        -1.08432715, -1.35710149,  0.63209603, -1.12097224,  0.68073807,
         0.7637646 , -1.46451145,  0.6552999 , -1.68373752, -0.70933446,
        -0.80929154, -0.28375178, -1.17385374, -0.36009566, -0.23010247,
        -2.58863433,  1.08220396, -0.06800095, -2.2400123 ,
        -0.17810424,  1.43175796,  0.67376846,  0.15458664,  0.33505994,
        -1.12403773,  0.2043789 ,  2.53475804,  1.28678007,  0.15575448,
        -1.75613323, -1.13392769, -1.03378928,  0.22096656,  1.1178748 ,
         0.82418693,  0.29144342,  0.92816689,  0.73111741, -1.22227643,
        -0.61029062,  0.84313715,  1.7350656 ,  0.05868   ,
        -1.07094516, -0.22501355, -0.81354397,  1.7663668 , -0.11071705,
         0.13181834, -0.2535315 , -1.74720164,  0.924813  , -0.2597081 ,
         1.35832837,  0.60533368,  0.4479033 ,  0.49223337, -1.89760654,
         0.04791352, -0.49562742, -0.89014603,  0.76825616,  0.91754046,
         1.908869  , -1.35982913, -0.74728487, -0.84640432,
         0.26466059, -0.21691863,  0.86687817,  0.97530286, -0.24372925,
         0.30100593,  1.64611347, -1.70182775,  0.79687241, -1.13899621,
        -0.5432072 , -1.61291972,  0.07133652, -0.10282952, -0.80751323,
         0.30973002, -1.67722797,  0.23339216, -0.57672029, -0.8315786 ,
        -0.21421719, -0.22054212,  0.44037454, -0.0998332 ,
         0.72670317,  0.19734779,  0.16805241,  0.47694245, -1.33077443,
         1.53365261, -0.2645516 , -2.70957703,  1.01834231, -0.72629139,
         0.81966961, -0.95161632,  0.06503237,  0.4700693 , -0.48969956,
        -0.24870699, -1.41274653, -0.53035546, -0.60677597,  0.65960019,
         0.71232605, -0.12331018,  1.00164754,  0.92160405;
    MatrixN bh(1,6);
    bh <<  0.58725381,  0.80494554,  0.38742995,  0.88945343,  0.47551743,
       -0.51676094, -1.76482654, -1.00933661,  0.59589447, -0.35533488,
       -0.21441281, -0.59934395,  1.13860987,  1.54007768, -0.59275557,
        0.34488808, -0.65688016, -1.32285357,  1.78428467, -1.96525652,
        1.00788129,  0.08913012, -1.29894715,  2.25200964;
    MatrixN h0(4,6);
    h0 << 0.08446621,  1.0464066 , -0.47999557, -2.43005995, -0.57640096,
         0.32325547,
        -0.36692141,  0.10829347,  1.98163288,  0.40482789, -0.97665644,
        -0.65442538,
        -1.19500277, -0.84711043,  0.52283423,  3.02841799, -0.51306126,
        -0.92895898,
        -0.99099861,  0.91742439, -1.3821918 , -2.05836024,  0.31506368,
        -1.32155691;
    MatrixN c0(4,6);
    c0 << -0.38215755, -1.89269969,  0.57590451, -0.52080821,  0.18102905,
         0.40946075,
        -1.75840279,  1.22605911, -0.17504982, -0.03457021, -0.17683007,
         1.8874866 ,
        -0.40154861, -1.15876227, -1.50491547, -0.3576299 ,  0.72734529,
        -0.46518967,
        -0.96895038, -0.6543138 ,  1.86329212, -0.55004714,  1.57573852,
         0.8326774;

    MatrixN dx(4,5);
    dx << -0.38357163, -0.86714858,  0.17928251, -0.8897528 , -0.56310317,
         1.13556945, -0.96059371,  1.05623048, -1.96295061, -0.88835076,
        -0.00875893,  0.05340227, -0.830587  , -0.18716025, -0.10043013,
         0.63109588,  2.2149619 ,  0.12413751,  0.29553936, -0.44483678;
    MatrixN dWxh(5,6);
    dWxh << 0.26727149, -0.08133788,  0.33468205,  0.34370674,  0.02945046,
         0.12838739,  0.23631975, -0.21644728, -0.06638742, -0.07176414,
         0.00204075,  0.56841888,  0.00876323, -0.09697867, -0.04626373,
         0.16282817, -0.05606907,  0.33368997,  0.40545964, -0.28516034,
         0.49970513,  0.10848973,  0.0698079 , -0.10043033,
        -0.46793463,  0.00956182,  0.41115469, -0.47761165, -0.32946813,
        -0.13772974,  0.57849399, -0.10980991,  0.00733201, -0.03233373,
        -0.09852576, -0.76756706,  0.01426504,  0.16978359, -0.16211331,
        -0.06752618,  0.04390171, -0.0458452 ,  0.83594929,  0.40193583,
        -0.70544207, -0.15169207,  0.03216878, -0.12995936,
        -0.09889733,  0.27113643, -0.31713746, -0.11300412,  0.10942654,
        -0.12364938, -0.25889292,  0.39423029,  0.05543564,  0.0544175 ,
        -0.18930825, -0.2254384 , -0.02086412,  0.03671858, -0.17888719,
        -0.03055687,  0.04854569, -0.17358248,  0.58406518,  0.09465204,
        -0.16659479, -0.03530392, -0.17553364,  0.04530919,
         0.38416253,  0.66027339, -0.38425339,  0.38772042, -0.22327849,
        -0.16184734,  0.12658545,  0.75006931,  0.06180672,  0.08323216,
         0.03587178,  0.52558164, -0.05730907, -0.0607314 , -0.08383923,
         0.19741949,  0.07976842,  0.05769887, -0.61165619, -0.33121582,
         0.58089072,  0.12528975, -0.58196662, -0.11791039,
         0.19562192,  0.39242807, -0.26184908,  0.23244588,  0.13263609,
        -0.07465991, -0.17186179,  0.4739238 ,  0.03103673,  0.03493207,
        -0.1969861 ,  0.31383336, -0.03145996, -0.05356354, -0.23578903,
         0.12253839,  0.02998696,  0.04204235,  0.7225947 , -0.19442127,
         0.34007999,  0.07449499, -0.27895099, -0.02649201;
    MatrixN dWhh(6,6);
    dWhh << 0.17028232, -0.02619462, -0.31773944,  0.13106315,  0.06836877,
         0.03733655, -0.31286251,  0.07194272,  0.01753363,  0.04584371,
         0.16493271,  0.21311268, -0.00860544, -0.05292015,  0.21259969,
        -0.03533715, -0.00330428, -0.09989583, -1.14149855, -0.11345836,
         0.1998938 ,  0.04201099, -0.03402706,  0.09985936,
        -0.03111109,  0.54468843, -0.52866834, -0.04053181,  0.13708666,
        -0.2046576 , -0.35341756,  0.73673823,  0.08900631,  0.09137111,
        -0.28901072, -0.15093053, -0.04302295,  0.02820223, -0.30300759,
         0.01744673,  0.08282704, -0.20891141,  0.84912027,  0.03306701,
        -0.05898308, -0.0116291 , -0.38113675,  0.03404177,
        -0.61929936, -0.33662546,  0.34891649, -0.74159948, -0.61084863,
        -0.11014087,  0.62797691, -0.438051  ,  0.0192294 ,  0.00216721,
         0.34254534, -1.14020034,  0.03257027,  0.23538675,  0.33967325,
        -0.26821422,  0.04819585, -0.28005406, -1.48173507,  0.61648429,
        -1.07951865, -0.23521516,  0.19242273, -0.03601949,
        -0.15818916, -1.27513178,  1.49310746, -0.14957233, -0.5930102 ,
         0.40316655,  1.24381455, -1.80738852, -0.20598219, -0.23045155,
         0.69956929, -0.03792235,  0.10816249,  0.0280287 ,  0.68367808,
        -0.07120793, -0.16682304,  0.47902521, -1.8899154 ,  0.12708712,
        -0.22056148, -0.05024222,  0.89081269, -0.17146674,
         0.30185081, -0.21783921,  0.03927588,  0.36745938,  0.39227679,
         0.20209413, -0.34734518, -0.23605222, -0.06034742, -0.05098323,
        -0.06291954,  0.62332653,  0.01271138, -0.14415493, -0.00820282,
         0.08358257, -0.08547171,  0.20511521,  0.46437415, -0.30358423,
         0.53203365,  0.11547603,  0.20197593,  0.06756831,
         0.27752932,  0.04973115, -0.35137003,  0.23518756, -0.01903037,
         0.02895129, -0.23506732,  0.14613658,  0.02108469,  0.05657348,
         0.24134716,  0.37002947, -0.01669678, -0.073027  ,  0.26368092,
         0.00543604,  0.00485413, -0.06444934, -1.56114242, -0.2026134 ,
         0.35652235,  0.07548003, -0.12368503,  0.07074973;
    MatrixN dbh(1,6);
    dbh << -0.34989363,  0.50395517, -0.06171694, -0.37149871, -0.29869106,
       -0.29500801,  0.34951375,  0.53952778,  0.07959111,  0.05240588,
       -0.22670633, -0.67343199, -0.02816835,  0.16008401, -0.32252122,
       -0.00998766,  0.11365831, -0.17093038,  0.9515033 ,  0.31008006,
       -0.54475261, -0.11660181, -0.35643633, -0.12399592;
    MatrixN dh0(4,6);
    dh0 << 0.10290585,  0.6003811 ,  1.291405  , -0.46166041, -1.34446851,
        -1.73933075,
        -1.15637257,  2.86396708,  0.48031038, -1.11379124,  0.55764045,
         0.16090269,
        -0.94717935, -0.15859507, -0.09205004, -0.00873303,  0.94206958,
         0.32441624,
         0.99483357, -0.38453576,  1.44332016,  0.82588065, -0.71918761,
        -1.25350774;
    MatrixN dc0(4,6);
    dc0 << -3.35741948e-03,  -1.46106423e+00,   1.29257818e-01,
         -1.19547873e+00,  -3.33623705e-01,  -9.39352847e-01,
         -9.28766627e-02,   5.52213860e-01,  -5.07965527e-01,
         -1.80691057e+00,   2.91576963e-02,  -4.01273496e-01,
         -1.27541860e+00,   9.93836639e-02,   8.94967978e-01,
          8.51211052e-02,   5.86679208e-01,  -3.07821541e-01,
          1.31413862e-01,  -9.08153476e-01,  -7.95295062e-04,
          8.55514474e-02,  -1.91333631e-01,  -6.46865651e-03;

      MatrixN dhnext(4,6);  // dchain(4,6);
      dhnext << 0.30205181, -0.28102632,  0.83093334, -0.64122251,  0.83822631,
        -0.88007204,
         0.13675218,  1.01181268,  1.50186707, -0.84798361, -0.61114198,
        -1.83707564,
        -1.20258171, -0.50114251,  0.276659  , -0.41687857, -0.59980883,
        -1.00525952,
         0.41939969,  0.42757554,  1.18497879, -0.42957686,  0.12083442,
         1.60612462;

      MatrixN dcnext(4,6);  // dchain(4,6);
      dcnext << -0.75938233, -1.82006247,  1.71589322, -1.36173504, -1.23997982,
        -1.16518323,
        -1.52956719,  0.55242048, -0.7671626 , -2.47904214,  0.70234078,
        -1.90730704,
        -3.25978547,  0.63922067,  0.90695779,  0.70081094,  0.65576896,
        -0.31710105,
         1.60752062, -1.07254902, -0.41718862,  0.12105698, -0.73097875,
        -0.09625871;

    LSTM lstm("{name='test2lstm';inputShape=[5,1;H=6;N=4}");
    *(lstm.params["Wxh")=Wxh;
    *(lstm.params["Whh")=Whh;
    *(lstm.params["bh")=bh;
    t_cppl cache;
    t_cppl grads;
    t_cppl states;
    cppl_set(&states,"test2lstm-h",new MatrixN(h0));
    MatrixN y=lstm.forward_step(x, &cache, &states);
    MatrixN dx0=lstm.backward_step(dchain, &cache, &states, &grads);
    bool allOk=true;
    bool ret=matComp(dx,dx0,"LSTMStepBackward dx",eps);
    if (!ret) allOk=false;
    ret=matComp(dWxh,*(grads["Wxh"),"LSTMStepBackward dWxh",eps);
    if (!ret) allOk=false;
    ret=matComp(dWhh,*(grads["Whh"),"LSTMStepBackward dWhh",eps);
    if (!ret) allOk=false;
    ret=matComp(dbh,*(grads["bh"),"LSTMStepBackward bh",eps);
    if (!ret) allOk=false;
    ret=matComp(dh0,*(grads["test2lstm-h0"),"LSTMStepBackward h0",eps);
    if (!ret) allOk=false;
    cppl_delete(&cache);
    cppl_delete(&grads);
    cppl_delete(&states);
    return allOk;
}
/*
bool checkLSTMForward(floatN eps=CP_DEFAULT_NUM_EPS) {
    MatrixN x(2,12);   // N, T, D, H = 2, 3, 4, 5
    x << ;
    MatrixN Wxh(4,5);
    MatrixN Whh(5,5);
    Wxh << ;
    Whh << ;
    MatrixN bh(1,5);
    bh << -0.7, -0.5, -0.3, -0.1,  0.1;
    MatrixN h0(2,5);
    h0 << ;
    MatrixN hn(2,15);
    hn << ;

//                        D,T
    LSTM lstm("{name='lstm3';inputShape=[4,3;H=5;N=2}");
    *(lstm.params["Wxh")= Wxh;
    *(lstm.params["Whh")= Whh;
    *(lstm.params["bh")=bh;
    //*(lstm.params)["ho"=h0;
    t_cppl cache;
    t_cppl states;
    states["lstm3-h" = new MatrixN(h0);
    MatrixN hn0=lstm.forward(x, &cache, &states, 0);
    cppl_delete(&cache);
    cppl_delete(&states);
    return matComp(hn,hn0,"LSTMForward",eps);
}

bool checkLSTMBackward(float eps=CP_DEFAULT_NUM_EPS) {
    MatrixN x(2,30);   // N, D, T, H = 2, 3, 10, 5
    x << ;
    MatrixN Wxh(3,5);
    Wxh << ;
    MatrixN Whh(5,5);
    Whh << ;
    MatrixN bh(1,5);
    bh <<  ;
    MatrixN h0(2,5);
    h0 << ;

    MatrixN dx(2,30);
    dx << ;
    MatrixN dWxh(3,5);
    dWxh << ;
    MatrixN dWhh(5,5);
    dWhh << ;
    MatrixN dbh(1,5);
    dbh << ;
    MatrixN dh0(2,5);
    dh0 << ;

    MatrixN dchain(2,50);
    dchain << ;
//                        D,T
    LSTM lstm("{name='lstm4';inputShape=[3,10;H=5;N=2}");   //inputShape=D, hidden=H
    *(lstm.params["Wxh")=Wxh;
    *(lstm.params["Whh")=Whh;
    *(lstm.params["bh")=bh;
    //*(lstm.params["ho")=h0;

    t_cppl cache;
    t_cppl states;
    t_cppl grads;
    states["lstm4-h" = new MatrixN(h0);
    MatrixN y=lstm.forward(x, &cache, &states);
    cppl_update(&states, "lstm4-h", &h0);
    MatrixN dx0=lstm.backward(dchain, &cache, &states, &grads);
    bool allOk=true;
    bool ret=matComp(dx,dx0,"LSTMBackward dx",eps);
    if (!ret) allOk=false;
    ret=matComp(dWxh,*(grads["Wxh"),"LSTMBackward dWxh",eps);
    if (!ret) allOk=false;
    ret=matComp(dWhh,*(grads["Whh"),"LSTMBackward dWhh",eps);
    if (!ret) allOk=false;
    ret=matComp(dbh,*(grads["bh"),"LSTMBackward bh",eps);
    if (!ret) allOk=false;
    ret=matComp(dh0,*(grads["lstm4-h0"),"LSTMBackward h0",eps); // XXX: Uhhh!
    if (!ret) allOk=false;

    cppl_delete(&cache);
    cppl_delete(&grads);
    cppl_delete(&states);
    return allOk;
}
*/
#endif
