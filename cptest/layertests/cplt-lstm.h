#ifndef _CPLT_LSTM_H
#define _CPLT_LSTM_H

#include "../testneural.h"

bool checkLSTMStepForward(floatN eps=CP_DEFAULT_NUM_EPS) {
    MatrixN x(3,4);    // N, D  // N, D, H = 3, 4, 5
    x << -0.4       , -0.25454545, -0.10909091,  0.03636364,
         0.18181818,  0.32727273,  0.47272727,  0.61818182,
         0.76363636,  0.90909091,  1.05454545,  1.2;
    MatrixN Wxh(4,4*5); // D, 4*H
    MatrixN Whh(5,4*5); // H, 4*H
    Wxh << -2.1       , -2.05696203, -2.01392405, -1.97088608, -1.9278481 ,
        -1.88481013, -1.84177215, -1.79873418, -1.7556962 , -1.71265823,
        -1.66962025, -1.62658228, -1.5835443 , -1.54050633, -1.49746835,
        -1.45443038, -1.41139241, -1.36835443, -1.32531646, -1.28227848,
        -1.23924051, -1.19620253, -1.15316456, -1.11012658, -1.06708861,
        -1.02405063, -0.98101266, -0.93797468, -0.89493671, -0.85189873,
        -0.80886076, -0.76582278, -0.72278481, -0.67974684, -0.63670886,
        -0.59367089, -0.55063291, -0.50759494, -0.46455696, -0.42151899,
        -0.37848101, -0.33544304, -0.29240506, -0.24936709, -0.20632911,
        -0.16329114, -0.12025316, -0.07721519, -0.03417722,  0.00886076,
         0.05189873,  0.09493671,  0.13797468,  0.18101266,  0.22405063,
         0.26708861,  0.31012658,  0.35316456,  0.39620253,  0.43924051,
         0.48227848,  0.52531646,  0.56835443,  0.61139241,  0.65443038,
         0.69746835,  0.74050633,  0.7835443 ,  0.82658228,  0.86962025,
         0.91265823,  0.9556962 ,  0.99873418,  1.04177215,  1.08481013,
         1.1278481 ,  1.17088608,  1.21392405,  1.25696203,  1.3;
    Whh << -0.7       , -0.67070707, -0.64141414, -0.61212121, -0.58282828,
        -0.55353535, -0.52424242, -0.49494949, -0.46565657, -0.43636364,
        -0.40707071, -0.37777778, -0.34848485, -0.31919192, -0.28989899,
        -0.26060606, -0.23131313, -0.2020202 , -0.17272727, -0.14343434,
        -0.11414141, -0.08484848, -0.05555556, -0.02626263,  0.0030303 ,
         0.03232323,  0.06161616,  0.09090909,  0.12020202,  0.14949495,
         0.17878788,  0.20808081,  0.23737374,  0.26666667,  0.2959596 ,
         0.32525253,  0.35454545,  0.38383838,  0.41313131,  0.44242424,
         0.47171717,  0.5010101 ,  0.53030303,  0.55959596,  0.58888889,
         0.61818182,  0.64747475,  0.67676768,  0.70606061,  0.73535354,
         0.76464646,  0.79393939,  0.82323232,  0.85252525,  0.88181818,
         0.91111111,  0.94040404,  0.96969697,  0.9989899 ,  1.02828283,
         1.05757576,  1.08686869,  1.11616162,  1.14545455,  1.17474747,
         1.2040404 ,  1.23333333,  1.26262626,  1.29191919,  1.32121212,
         1.35050505,  1.37979798,  1.40909091,  1.43838384,  1.46767677,
         1.4969697 ,  1.52626263,  1.55555556,  1.58484848,  1.61414141,
         1.64343434,  1.67272727,  1.7020202 ,  1.73131313,  1.76060606,
         1.78989899,  1.81919192,  1.84848485,  1.87777778,  1.90707071,
         1.93636364,  1.96565657,  1.99494949,  2.02424242,  2.05353535,
         2.08282828,  2.11212121,  2.14141414,  2.17070707,  2.2;
    MatrixN bh(1,4*5); // 4*H
    bh << 0.3       ,  0.32105263,  0.34210526,  0.36315789,  0.38421053,
        0.40526316,  0.42631579,  0.44736842,  0.46842105,  0.48947368,
        0.51052632,  0.53157895,  0.55263158,  0.57368421,  0.59473684,
        0.61578947,  0.63684211,  0.65789474,  0.67894737,  0.7;
    MatrixN h(3,5);  // N, H (prev_h)
    h << -0.3       , -0.22857143, -0.15714286, -0.08571429, -0.01428571,
         0.05714286,  0.12857143,  0.2       ,  0.27142857,  0.34285714,
         0.41428571,  0.48571429,  0.55714286,  0.62857143,  0.7;
    MatrixN hn(3,5); // N, H (next_h)
    hn << 0.24635157,  0.28610883,  0.32240467,  0.35525807,  0.38474904,
         0.49223563,  0.55611431,  0.61507696,  0.66844003,  0.7159181 ,
         0.56735664,  0.66310127,  0.74419266,  0.80889665,  0.858299;
    MatrixN c(3,5);  // N, H (prev_c)
    c << -0.4       , -0.30714286, -0.21428571, -0.12142857, -0.02857143,
         0.06428571,  0.15714286,  0.25      ,  0.34285714,  0.43571429,
         0.52857143,  0.62142857,  0.71428571,  0.80714286,  0.9;
    MatrixN cn(3,5); // N, H (next_c)
    cn << 0.32986176,  0.39145139,  0.451556  ,  0.51014116,  0.56717407,
         0.66382255,  0.76674007,  0.87195994,  0.97902709,  1.08751345,
         0.74192008,  0.90592151,  1.07717006,  1.25120233,  1.42395676;

    LSTM lstm("{name='testlstm';inputShape=[4,1];H=5;N=3}");
    *(lstm.params["Wxh"])= Wxh;
    *(lstm.params["Whh"])= Whh;
    *(lstm.params["bh"])=bh;
    t_cppl cache;
    t_cppl states;
    cppl_set(&states,"testlstm-h",new MatrixN(h));
    cppl_set(&states,"testlstm-c",new MatrixN(c));
    t_cppl cp=lstm.forward_step(x, &cache, &states, 0);
    cppl_delete(&cache);
    cppl_delete(&states);
    bool allOk=true;
    if (!matComp(hn,*(cp["testlstm-h0"]),"LSTMForwardStep",eps)) {
        allOk = false;
    }
    if (!matComp(cn,*(cp["testlstm-c0"]),"LSTMForwardStep",eps)) {
        allOk = false;
    }
    cppl_delete(&cp);
    return allOk;
}

bool checkLSTMStepBackward(float eps=CP_DEFAULT_NUM_EPS) {
    MatrixN x(4,5);     // N, D, H = 4, 5, 6
    x << 0.0871107, -0.61504182, -0.62466852, -0.1710203, 0.2413938,
        -0.42729072, 0.58361612, -0.75185921, -0.88845531, -0.81558297,
        0.39905526, -1.37877218, 0.42658499, -0.83351793, 0.2215589,
        0.26092829, 1.31782586, -0.04876825, -1.0563379, 1.90000913;
    MatrixN Wxh(5,4*6);
    Wxh << 1.67231976, 0.94457082, -1.59046386, 0.78564787, -0.26963539, 0.69146119,
        0.08774743, 1.22225406, 0.61797164, 0.23233868, -1.52093713, -0.56005574,
        0.1093506, -0.12876097, -0.27926513, 0.4327001, -0.14286482, 1.32578462,
        -0.35803341, 1.17326649, -0.06622818, -2.23492114, -0.68790401, -1.30150373,
        1.50561292, -0.19408519, 2.74818518, 0.50597622, -1.02087205, 0.86944464,
        0.67609062, 0.15769015, -1.90708282, -0.80882322, 0.02618902, -0.83189323,
        -0.25762474, 1.59241342, 1.42737598, -0.10285135, 1.49054251, 0.93913081,
        -1.370892, -1.92270299, 0.13851127, -1.87197171, 1.1774237, 0.24820509,
        -0.47323217, -1.39962245, 0.39651232, -1.68458058, -0.31738383, 1.07673547,
        -1.69629334, -0.34439286, 0.15885223, 1.15587471, -0.23605429, -1.20392132,
        0.23741647, -2.08193336, -0.95961855, 0.47222682, -0.25308625, 0.15212779,
        0.55345875, 0.76139121, 1.88106585, 1.00899556, 1.54161965, 0.98470818,
        -1.02259829, -0.27351831, 0.45549583, -1.46373186, -0.26186267, -2.07864781,
        1.64762783, 1.90406158, 0.80254508, -0.63276833, -2.29790553, 0.45499835,
        0.04195063, -0.05876303, -2.53531778, 0.03323857, -0.06649517, 1.0652346,
        1.41720668, 1.39678019, 0.04522445, 0.03600546, 0.52194698, -1.8469723,
        -1.20903461, 1.41626367, -0.78225555, 0.0267529, -0.70065832, -0.40119178,
        -0.16151207, -0.00969331, -0.5358501, -0.80213472, 1.02730102, 0.87873011,
        -1.08818975, 1.66854346, 0.97529632, 1.44925117, 0.13832278, 1.64164755,
        0.04749087, 0.63315802, 0.23268963, 0.33788006, -0.46420033, 0.28117938;
    MatrixN Whh(6,4*6);
    Whh << -0.51989091, -0.12774683, -0.97130712, -1.19988554, 0.261293, -1.08210639,
        -0.46146772, -0.51843343, 0.93203774, -0.76116735, 1.03140323, 0.25722736,
        0.25073403, -0.55331687, -0.20409439, -0.39448788, 0.55904542, 0.86158567,
        0.4312841, -0.35807549, -0.7546594, -1.4226083, 0.4362348, -0.13056774,
        0.84575395, 0.36310091, -1.05620013, 0.32641579, -0.5020443, -2.56925648,
        -0.65551937, -0.44870916, 1.27833629, -1.04005898, 1.69035204, 1.30598692,
        0.78926281, 0.62842549, 1.27774634, 0.11667877, -0.728364, 1.53007106,
        -0.29169838, -2.19240039, -1.23952473, 1.87454608, -0.85549982, -0.29380623,
        -1.40817099, 0.5359255, 0.38696549, 0.27469018, -0.44578254, 0.66676479,
        -1.57310748, -0.14064329, -0.07443006, 0.07551643, -0.38620622, -0.13837108,
        -0.8581351, 1.35437035, -1.87074544, 0.02320933, 0.22785703, 0.17938608,
        0.30867081, 0.19078725, 0.16709089, 0.00446662, -0.51175015, -0.46924069,
        1.76512656, 1.25111896, -0.6946343, 0.314578, 0.77374841, -0.20951208,
        -0.93662364, -0.13374722, 1.10314917, -1.00477867, -0.38377153, 1.70900563,
        -0.0929966, 0.10957718, -0.55405018, -0.74775287, -0.41184619, 2.17251662,
        1.01213592, -0.63528024, -0.34034862, 0.02368345, 1.68891705, 1.55206781,
        1.26335637, -1.18792282, 0.39367224, -0.24856924, 1.14380818, -0.77054535,
        0.07992548, -0.44584298, 0.07398662, 0.15624592, -0.2753091, 0.0240697,
        -0.41009994, -0.52514587, -0.58993751, -0.18565636, 0.58147075, -2.32365926,
        0.37096383, 0.73017761, -0.4773638, -1.55915118, -1.31312541, -0.37188893,
        1.51900952, -0.959909, 0.88376022, -0.70538727, 0.93194666, 0.44611254,
        0.44255143, -0.35097337, -0.9033578, 2.59103302, 0.358385, -0.39322468,
        -1.36236075, 0.91295046, -0.86221768, 1.27223908, -0.4705885, -0.49571326,
        1.6328264, -1.04997993, -2.76898417, 0.47601528, -1.17103407, -0.24339371;
    MatrixN bh(1,4*6);
    bh <<  -0.0653378, -1.32989109, -0.95406261, 0.61358856, 0.06921843, -0.7114319,
         0.81431978, -0.01520707, 0.07008937, -0.5399855, 0.00719432, -0.08391907,
         -0.44713585, 0.06168086, -0.51086977, 0.06098595, -1.40550122, 0.00192894,
         1.15226073, 0.68518931, -0.17004284, 0.06703904, 0.79842334, -0.46417552;
    MatrixN h0(4,6);
    h0 << 0.35495595, -1.10451304, 1.10057149, -0.75263449, 0.94624812, -1.24202715,
        1.04894754, 0.82888119, -0.29526206, -0.69242865, -0.96694184, 1.46484541,
        -0.98061148, 0.26810979, 0.58418927, 0.37009559, -0.70185348, 0.7601071,
        -0.31797195, -1.1400492, 1.59601903, 1.5635216, -1.87329932, 0.9532305;
    MatrixN c0(4,6);
    c0 << 0.35233796, -2.15761027,  0.05000112, -2.6656004,  -2.14164851, -0.0747306,
   0.36416211, -1.98388681,  1.94876576,  1.09490469,  0.28573774, -1.55307111,
  -1.38440604, -0.29165017, -0.14491362,  1.1871104,   0.48349733, -1.56116523,
  -0.39156165, -0.13514026,  1.84395872, -0.18494329, -0.16897181, -0.17415186;

    MatrixN dx(4,5);
    dx << -1.40294565, -0.07047986, -1.00464135, -0.98726762,  0.67941976,
   0.18956968, -0.87899967, -0.00507276,  2.36415359, -0.04458574,
  -0.34145366, -0.68223105, -0.86291759,  0.8245847,   1.17717544,
   1.16440531,  0.96858699, -1.99712481, -0.08466606, -0.54624539;
    MatrixN dWxh(5,4*6);
    dWxh << -1.57310262e-01,  1.06104468e-01,  2.24857654e-02,  5.36361887e-03,
    1.43302478e-01, -5.17691279e-02,  2.43894490e-02, -8.75716144e-02,
   -2.17518597e-02, -1.29153019e-02,  3.71261963e-02, -1.25196993e-01,
   -4.71167864e-02,  6.99470324e-02,  5.00279655e-03,  4.56454317e-02,
   -6.09810747e-03, -1.24195233e-02, -3.85758831e-01,  3.96814763e-02,
   -2.12026721e-01, -7.85227015e-02, -1.00477554e-01,  6.99571340e-02,
    5.85590114e-01, -4.39622243e-01, -9.61373370e-03,  1.44396878e-01,
   -2.54001621e-01,  1.16742402e-01, -1.37868051e-01,  4.61545207e-01,
    1.02644886e-02,  3.18247756e-01, -3.07808657e-01, -3.83499401e-02,
    1.99058132e-02, -2.86295165e-01, -1.08548623e-02,  1.55135988e-01,
   -6.16527744e-03,  9.24914858e-03,  5.81731409e-01, -3.26519550e-01,
   -1.06751073e+00, -6.76764037e-01,  1.63686995e-01, -1.01893736e-02,
   -1.80370164e-01, -1.49368193e-02,  4.45061763e-02,  2.24993302e-01,
   -2.91538601e-02, -4.93809190e-02, -2.45027564e-03,  1.13404905e-01,
   -3.37776912e-02,  3.44437855e-01, -2.52471995e-01, -2.19697521e-01,
   -1.48205568e-01, -1.87219332e-02,  5.28967145e-03,  2.89322697e-01,
   -5.24427091e-02, -2.97444869e-02, -6.92762600e-01,  7.03850805e-02,
    3.92183465e-02,  9.82181358e-02, -1.00790944e-01,  1.48249841e-01,
    2.90047323e-01, -3.13125226e-01,  3.35615195e-02,  8.92567177e-02,
    1.52308460e-01, -4.68249712e-02, -1.32925163e-01, -4.32304562e-02,
   -3.98302261e-02,  9.08965040e-02, -6.42351173e-02, -3.62804353e-01,
   -1.30900585e-01, -1.54103671e-01, -1.92176755e-02,  3.52594995e-01,
   -3.96812472e-02, -3.53335232e-02, -8.38282026e-01, -3.92431130e-02,
    8.57602495e-01,  5.84166572e-01, -2.26110883e-01,  3.14190939e-01,
   -5.23349516e-02,  7.56167088e-02,  5.44044073e-02, -1.50348008e-03,
    3.86632120e-01, -8.63145950e-02, -1.33698928e-02, -6.87111255e-02,
   -5.77875042e-02, -1.52665188e-02,  6.25553821e-02, -3.96053814e-01,
   -8.58535996e-02,  6.07339571e-02,  6.89972222e-03,  1.37412045e-01,
    5.94453528e-04, -2.52334872e-02, -6.90945662e-01, -1.27764000e-01,
   -1.54133042e+00, -8.05634037e-01, -2.18096000e-01,  1.90520431e-01;
    MatrixN dWhh(6,4*6);
    dWhh << 0.39439872, -0.17010179, -0.05959418, -0.17218494, -0.14196335,  0.10218447,
  -0.04846763,  0.0300637,   0.04934498, -0.23869013,  0.13871775,  0.28495126,
   0.16289639, -0.09899135, -0.01288238, -0.24267206,  0.04519203,  0.03546938,
   0.95717819, -0.12509455,  0.25879896,  0.04274658,  0.18429785, -0.1693167,
  -0.12173819, -0.06439702, -0.0357352,   0.25530329, -0.66207466,  0.11242051,
   0.04658635,  0.39674918,  0.05604983,  0.46781227, -0.42960874,  0.41524262,
   0.01654473, -0.09623171,  0.00617639,  0.01022414, -0.03859114,  0.01997282,
   0.72126626,  0.13891908,  0.92455735,  0.44740576,  0.33236083, -0.24691851,
  -0.19569568,  0.33275328,  0.01583391, -0.27841395,  0.51393751, -0.08945814,
   0.06935356, -0.36747447, -0.02817542, -0.47517347,  0.43378546, -0.14202101,
   0.05421843,  0.22886925,  0.0101808,  -0.23717341,  0.05601528,  0.0016954,
  -0.22563065, -0.04552109, -1.29520155, -0.71493308, -0.17308171,  0.02147143,
  -0.11725135, -0.03309697,  0.05855957,  0.27162499, -0.00622651, -0.03607991,
  -0.0121903,   0.27199206, -0.04569332,  0.45916865, -0.34129283, -0.30787496,
  -0.1521826,  -0.04323194,  0.01147095,  0.31930605, -0.04741432, -0.02913094,
  -0.59039766, -0.07598915, -1.26843923, -0.66228546, -0.07412154,  0.13949562,
   0.21640086, -0.11513823,  0.01512733, -0.23037059,  0.5085872,  -0.1070871,
  -0.09646704, -0.51583787, -0.03761958, -0.48517977,  0.42066403, -0.32611372,
  -0.04716268,  0.00856749, -0.02446042,  0.09306197,  0.00872662, -0.02765329,
  -0.93395393,  0.05092525,  1.51999224,  0.97608326, -0.3633164,   0.32435087,
  -0.25486822,  0.10233599, -0.0438111,   0.276555,   -0.78947859,  0.16109927,
   0.12179536,  0.61343985,  0.07213538,  0.57626988, -0.52239837,  0.57689171,
   0.08759523, -0.03503651,  0.02452667, -0.16250297, -0.01503818,  0.04249588,
   1.3613644,   0.03664259, -0.77374922, -0.59669917,  0.519217,   -0.46093771;
    MatrixN dbh(1,4*6);
    dbh << -0.35576894,  0.49262835, -0.05006048, -0.33156571,  0.09211247,  0.01521882,
  0.17410673, -0.25916032,  0.0454027,  -0.5079231,   0.41362445,  0.42590895,
  0.21489715,  0.2862747,   0.01915112, -0.59293469,  0.08366239,  0.04712374,
  0.93838772,  0.06989887, -0.81215466, -0.56784333,  0.16807208, -0.35722049;
    MatrixN dh0(4,6);
    dh0 << 1.47998717,  1.46677484, -0.19186037,  0.74601721,  0.36893686, -0.84248438,
  0.8996224,   0.01571788,  0.17354335,  1.7291758,  -0.255742,    0.12586002,
  0.15389183, -0.21301641,  0.75289004, -0.3565057,  -0.78261979, -1.0909945,
  1.1949185,   0.10407293, -0.18119553,  0.27922584,  1.12474144,  2.33079594;
    MatrixN dc0(4,6);
    dc0 << 0.13608108,  0.36243765, -0.08135181,  0.20644522, -0.23005649,  0.05039556,
  0.88429173, -0.05720065,  0.03019144, -0.33930842,  1.31901132, -0.33079744,
 -0.0822288,   0.30469877, -0.19032635,  0.04229486,  0.12969023, -0.20698999,
  0.00608137, -0.68885403, -0.0050103,  -0.31733399,  0.65378473,  0.90832778;

      MatrixN dhnext(4,6);  // dchain(4,6);
      dhnext << 2.27643053, -0.7885388,  -0.48256725,  1.65741074, -0.31026046, -1.86046244,
  1.08930257, -0.47004494, -0.44363876, -1.18237561, -0.89043072, -0.28649944,
  0.05262659,  1.42914342, -0.92187717, -1.2034729,   0.0572265,  -0.06849968,
 -0.59068138, -1.44350253, -0.49717128, -0.24463223, -0.35138132, -0.70493229;

      MatrixN dcnext(4,6);  // dchain(4,6);
      dcnext << -0.32148315,  0.85657749, -0.12443571,  1.90182063, -1.38133461,  0.20032047,
  0.68933673, -0.51407012,  0.58889961, -0.26869602,  1.49420135, -1.08012068,
 -1.6213349,   0.72557348, -0.09883938,  0.11600921,  0.17970186, -0.29548906,
  0.13532574, -1.56997402, -0.65726879, -0.59209996,  0.96049231,  1.87353271;

    LSTM lstm("{name='test3lstm';inputShape=[5,1];H=6;N=4}");
    *(lstm.params["Wxh"])=Wxh;
    *(lstm.params["Whh"])=Whh;
    *(lstm.params["bh"])=bh;
    t_cppl cache;
    t_cppl grads;
    t_cppl states;
    cppl_set(&states,"test3lstm-h",new MatrixN(h0));
    cppl_set(&states,"test3lstm-c",new MatrixN(c0));
    t_cppl cp=lstm.forward_step(x, &cache, &states);
    cppl_delete(&cp);
    if (!matComp(*states["test3lstm-h"], h0)) {
        cerr << endl << "h0 got changed by forward!" << endl << endl;
    }
    //cppl_update(&states,"test3lstm-h",new MatrixN(h0));
    //cppl_update(&states,"test3lstm-c",new MatrixN(c0));
    t_cppl cp2;
    cppl_set(&cp2,"test3lstm-h",new MatrixN(dhnext));
    cppl_set(&cp2,"test3lstm-c",new MatrixN(dcnext));
    MatrixN dx0=lstm.backward_step(cp2, &cache, &states, &grads);
    cppl_delete(&cp2);
    bool allOk=true;
    bool ret=matComp(dx,dx0,"LSTMStepBackward dx",eps);
    if (!ret) allOk=false;
    ret=matComp(dWxh,*(grads["Wxh"]),"LSTMStepBackward dWxh",eps);
    if (!ret) allOk=false;
    ret=matComp(dWhh,*(grads["Whh"]),"LSTMStepBackward dWhh",eps);
    if (!ret) allOk=false;
    ret=matComp(dbh,*(grads["bh"]),"LSTMStepBackward bh",eps);
    if (!ret) allOk=false;
    ret=matComp(dh0,*(grads["test3lstm-h0"]),"LSTMStepBackward h0",eps);
    if (!ret) allOk=false;
    ret=matComp(dc0,*(grads["test3lstm-c0"]),"LSTMStepBackward c0",eps);
    if (!ret) allOk=false;
    cppl_delete(&cache);
    cppl_delete(&grads);
    cppl_delete(&states);
    return allOk;
}
/*
bool checkLSTMForward(floatN eps=CP_DEFAULT_NUM_EPS) {
    MatrixN x(2,12);   // N, T, D, H = 2, 3, 4, 5
    x << ;
    MatrixN Wxh(4,5);
    MatrixN Whh(5,5);
    Wxh << ;
    Whh << ;
    MatrixN bh(1,5);
    bh << -0.7, -0.5, -0.3, -0.1,  0.1;
    MatrixN h0(2,5);
    h0 << ;
    MatrixN hn(2,15);
    hn << ;

//                        D,T
    LSTM lstm("{name='lstm3';inputShape=[4,3;H=5;N=2}");
    *(lstm.params["Wxh")= Wxh;
    *(lstm.params["Whh")= Whh;
    *(lstm.params["bh")=bh;
    //*(lstm.params)["ho"=h0;
    t_cppl cache;
    t_cppl states;
    states["lstm3-h" = new MatrixN(h0);
    MatrixN hn0=lstm.forward(x, &cache, &states, 0);
    cppl_delete(&cache);
    cppl_delete(&states);
    return matComp(hn,hn0,"LSTMForward",eps);
}

bool checkLSTMBackward(float eps=CP_DEFAULT_NUM_EPS) {
    MatrixN x(2,30);   // N, D, T, H = 2, 3, 10, 5
    x << ;
    MatrixN Wxh(3,5);
    Wxh << ;
    MatrixN Whh(5,5);
    Whh << ;
    MatrixN bh(1,5);
    bh <<  ;
    MatrixN h0(2,5);
    h0 << ;

    MatrixN dx(2,30);
    dx << ;
    MatrixN dWxh(3,5);
    dWxh << ;
    MatrixN dWhh(5,5);
    dWhh << ;
    MatrixN dbh(1,5);
    dbh << ;
    MatrixN dh0(2,5);
    dh0 << ;

    MatrixN dchain(2,50);
    dchain << ;
//                        D,T
    LSTM lstm("{name='lstm4';inputShape=[3,10;H=5;N=2}");   //inputShape=D, hidden=H
    *(lstm.params["Wxh")=Wxh;
    *(lstm.params["Whh")=Whh;
    *(lstm.params["bh")=bh;
    //*(lstm.params["ho")=h0;

    t_cppl cache;
    t_cppl states;
    t_cppl grads;
    states["lstm4-h" = new MatrixN(h0);
    MatrixN y=lstm.forward(x, &cache, &states);
    cppl_update(&states, "lstm4-h", &h0);
    MatrixN dx0=lstm.backward(dchain, &cache, &states, &grads);
    bool allOk=true;
    bool ret=matComp(dx,dx0,"LSTMBackward dx",eps);
    if (!ret) allOk=false;
    ret=matComp(dWxh,*(grads["Wxh"),"LSTMBackward dWxh",eps);
    if (!ret) allOk=false;
    ret=matComp(dWhh,*(grads["Whh"),"LSTMBackward dWhh",eps);
    if (!ret) allOk=false;
    ret=matComp(dbh,*(grads["bh"),"LSTMBackward bh",eps);
    if (!ret) allOk=false;
    ret=matComp(dh0,*(grads["lstm4-h0"),"LSTMBackward h0",eps); // XXX: Uhhh!
    if (!ret) allOk=false;

    cppl_delete(&cache);
    cppl_delete(&grads);
    cppl_delete(&states);
    return allOk;
}
*/
#endif
